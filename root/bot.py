import logging
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
import requests
import os
import re
import sys
import asyncio
import hashlib



import glob
import time
import hashlib
from aiogram import types
from asyncio import sleep
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
import sqlite3
import uuid
from aiogram.fsm.state import State, StatesGroup

class SetEmoji(StatesGroup):
    waiting_for_emoji = State()

from collections import deque    
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
class RenameProfile(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_rename_approve = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º


import subprocess
from datetime import datetime, timedelta, timezone
import psutil
import platform
import socket

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import init_db, get_profile_name, save_profile_name

DB_PATH = "vpn.db"
init_db(DB_PATH)

cancel_markup = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

USERS_FILE = "users.txt"

LAST_MENU_FILE = "last_menu.json"

class SetEmojiState(StatesGroup):
    waiting_for_emoji = State()
    
# –¥–ª—è SQLite
def save_profile_name(user_id, new_profile_name, db_path="/root/vpn.db"):
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE id=?", (user_id,))
    res = cur.fetchone()
    if res:
        cur.execute("UPDATE users SET profile_name=? WHERE id=?", (new_profile_name, user_id))
    else:
        cur.execute("INSERT INTO users (id, profile_name) VALUES (?, ?)", (user_id, new_profile_name))
    conn.commit()
    conn.close()


def save_user_id(user_id):
    try:
        user_id = str(user_id)
        if not os.path.exists(USERS_FILE):
            with open(USERS_FILE, "w") as f:
                f.write(f"{user_id}\n")
        else:
            with open(USERS_FILE, "r+") as f:
                users = set(line.strip() for line in f)
                if user_id not in users:
                    f.write(f"{user_id}\n")
    except Exception as e:
        print(f"[save_user_id] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_id: {e}")


import json

MAX_BOT_MENUS = 1

PENDING_FILE = "pending_users.json"

class AdminAnnounce(StatesGroup):
    waiting_for_text = State()
    
async def safe_send_message(chat_id, text, **kwargs):
    print(f"[SAFE_SEND] chat_id={chat_id}, text={text[:50]}, kwargs={kwargs}")
    try:
        await bot.send_message(chat_id, text, **kwargs)
        print(f"[SAFE_SEND] success to {chat_id}!")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è] chat_id={chat_id}: {e}")


def get_last_menu_ids(user_id):
    if not os.path.exists(LAST_MENUS_FILE):
        return []
    try:
        with open(LAST_MENUS_FILE, "r") as f:
            data = json.load(f)
        return data.get(str(user_id), [])
    except Exception:
        return []

async def delete_last_menus(user_id):
    if not os.path.exists(LAST_MENUS_FILE):
        return
    with open(LAST_MENUS_FILE, "r") as f:
        data = json.load(f)
    ids = data.get(str(user_id), [])
    for mid in ids:
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass
    data[str(user_id)] = []
    with open(LAST_MENUS_FILE, "w") as f:
        json.dump(data, f)

def set_last_menu_id(user_id, msg_id):
    data = {}
    if os.path.exists(LAST_MENUS_FILE):
        with open(LAST_MENUS_FILE, "r") as f:
            data = json.load(f)
    user_id = str(user_id)
    data[user_id] = [msg_id]
    with open(LAST_MENUS_FILE, "w") as f:
        json.dump(data, f)

   

def add_pending(user_id, username, fullname):
    pending = {}
    if os.path.exists(PENDING_FILE):
        with open(PENDING_FILE, "r") as f:
            pending = json.load(f)
    pending[str(user_id)] = {"username": username, "fullname": fullname}
    with open(PENDING_FILE, "w") as f:
        json.dump(pending, f)

def remove_pending(user_id):
    if not os.path.exists(PENDING_FILE):
        return
    with open(PENDING_FILE, "r") as f:
        pending = json.load(f)
    pending.pop(str(user_id), None)
    with open(PENDING_FILE, "w") as f:
        json.dump(pending, f)

def is_pending(user_id):
    if not os.path.exists(PENDING_FILE):
        return False
    try:
        with open(PENDING_FILE, "r") as f:
            pending = json.load(f)
    except Exception:
        pending = {}
    return str(user_id) in pending


load_dotenv()
FILEVPN_NAME = os.getenv("FILEVPN_NAME")
if not FILEVPN_NAME:
    raise RuntimeError("FILEVPN_NAME –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not ADMIN_ID:
    raise RuntimeError("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
ADMIN_ID = int(ADMIN_ID)
EMOJI_FILE = "user_emojis.json"
LAST_MENUS_FILE = "last_menus.json"
MAX_MENUS_PER_USER = 3  # –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–æ, –æ–±—ã—á–Ω–æ 3-5

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã 3x-UI –¥–ª—è VLESS === 
#–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∞—Å—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ VLESS –æ–Ω–ª–∞–π–Ω —Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫"#". –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å 3X-UI
#BASE_URL    = "–ó–∞–º–µ–Ω–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —Å—é–¥–∞/–ü—É—Ç—å –∫ –ø–∞–Ω–µ–ª–∏ –ø–æ —Ç–∏–ø—É Yy7jywStMXYLYzS"
#LOGIN_PATH  = "/login"
#ONLINES_PATH = "/panel/api/inbounds/onlines"
#USERNAME = "–õ–û–ì–ò–ù"
#PASSWORD = "–ü–ê–†–û–õ–¨"

# –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏ 3x-UI
#session = requests.Session()

ITEMS_PER_PAGE = 5
AUTHORIZED_USERS = [ADMIN_ID]  # –°–ø–∏—Å–æ–∫ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

print(f"=== BOT START ===")
print(f"BOT_TOKEN starts with: {BOT_TOKEN[:8]}... (length: {len(BOT_TOKEN) if BOT_TOKEN else 0})")
print(f"ADMIN_ID: {ADMIN_ID} ({type(ADMIN_ID)})")
print(f"==================")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
if not BOT_TOKEN or BOT_TOKEN == "<Enter API Token>":
    print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    sys.exit(1)

if not ADMIN_ID or ADMIN_ID == "<Enter your user ID>":
    print("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    sys.exit(1)


class VPNSetup(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    entering_user_id = State()        # –∂–¥—ë–º, —á—Ç–æ –∞–¥–º–∏–Ω –≤–≤–µ–¥—ë—Ç Telegram-ID
    entering_client_name_manual = State()  # –∂–¥—ë–º, —á—Ç–æ –∞–¥–º–∏–Ω –≤–≤–µ–¥—ë—Ç –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —ç—Ç–æ–≥–æ ID
    choosing_option = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞).
    entering_client_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.
    entering_days = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    deleting_client = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
    list_for_delete = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    choosing_config_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    choosing_protocol = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ OpenVPN
    choosing_wg_type = State()  # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ WireGuard
    confirming_rename = State()  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ WireGuard


# –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_DESCRIPTION = """
–î–ª—è —Å–≤–æ–∏—Ö
ü™™ –ñ–º–∏ /start, –æ—Ç–ø—Ä–∞–≤–ª—è–π –∑–∞—è–≤–∫—É, –∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è!

"""

BOT_SHORT_DESCRIPTION = "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π!"


#–î–ª—è VLESS –æ–Ω–ª–∞–π–Ω —É–±–µ—Ä–∏ –Ω–∏–∂–µ #, —á—Ç–æ–± —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å —Å def authenticate() -> bool:
#def authenticate() -> bool:
#    """
#    –õ–æ–≥–∏–Ω–∏–º—Å—è –Ω–∞ 3x-UI, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –≤ session.
#    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, –∏–Ω–∞—á–µ False.
#    """
#    url = BASE_URL + LOGIN_PATH
#    payload = {"username": USERNAME, "password": PASSWORD}
#    try:
#        resp = session.post(url, json=payload, timeout=10)
#        resp.raise_for_status()
#    except Exception as e:
#        logging.error(f"[AUTH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /login: {e}")
#        return False
#
#    data = resp.json()
#    if data.get("success"):
#        logging.info("[AUTH] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
#        return True
#    else:
#        logging.error(f"[AUTH] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è: {data}")
#        return False






def user_registered(user_id):
    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ ‚Äî –û–ö
    return bool(get_profile_name(user_id))

APPROVED_FILE = "approved_users.txt"

# ==== –≠–º–æ–¥–∑–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ ====
@dp.message(StateFilter(SetEmoji.waiting_for_emoji))
async def set_user_emoji(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    client_name = (await state.get_data())['client_name']
    emoji = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç "–í–≤–µ–¥–∏ —Å–º–∞–π–ª..."
    try:
        await message.reply_to_message.delete()
    except Exception:
        pass

    if emoji == "‚ùå":
        set_emoji_for_user(client_name, "")  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
        reply_text = "–°–º–∞–π–ª —É–¥–∞–ª—ë–Ω"
    else:
        set_emoji_for_user(client_name, emoji)  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è
        reply_text = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–º–∞–π–ª: {emoji}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    info_msg = await message.answer(reply_text)
    await sleep(2)
    try:
        await info_msg.delete()
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID), user_id=user_id)
    )
    await state.clear()

def is_approved_user(user_id):
    user_id = str(user_id)
    if not os.path.exists(APPROVED_FILE):
        return False
    with open(APPROVED_FILE, "r") as f:
        approved = [line.strip() for line in f]
    return user_id in approved

def approve_user(user_id):
    user_id = str(user_id)
    if not is_approved_user(user_id):
        with open(APPROVED_FILE, "a") as f:
            f.write(user_id + "\n")

def set_user_emoji(user_id, emoji):
    data = {}
    if os.path.exists(EMOJI_FILE):
        with open(EMOJI_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    data[str(user_id)] = emoji
    with open(EMOJI_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

def get_user_emoji(user_id):
    if not os.path.exists(EMOJI_FILE):
        return ""
    with open(EMOJI_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get(str(user_id), "")

async def switch_menu(callback: types.CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    try:
        await callback.message.delete()
    except Exception:
        pass  # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
    await bot.send_message(callback.from_user.id, text, reply_markup=reply_markup, parse_mode=parse_mode)

async def set_bot_commands():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    """
    async with Bot(token=BOT_TOKEN) as bot:
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ]

        await bot.set_my_commands(commands)


@dp.callback_query(lambda c: c.from_user.id != ADMIN_ID
                          and c.data != "send_request"
                          and not is_approved_user(c.from_user.id)
                          and not is_pending(c.from_user.id))
async def _deny_unapproved_callback(callback: types.CallbackQuery):
    await callback.answer(
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /start.",
        show_alert=True
    )


@dp.callback_query(lambda c: c.data.startswith("approve_rename_"))
async def process_application_rename(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_", 2)[-1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞—è–≤–∫–∏ (–º–µ–Ω—é –∑–∞—è–≤–∫–∏)
    await state.update_data(approve_user_id=user_id, pending_menu_msg_id=callback.message.message_id)
    try:
        await callback.message.delete()  # –£–∂–µ —É–¥–∞–ª—è–µ–º
    except Exception:
        pass
    msg = await bot.send_message(
        callback.from_user.id,
        f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id <code>{user_id}</code>):",
        parse_mode="HTML"
    )
    await state.set_state(RenameProfile.waiting_for_rename_approve)
    await state.update_data(rename_prompt_id=msg.message_id)
    await callback.answer()

def remove_user_id(user_id):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º user_id –∏–∑ —Ñ–∞–π–ª–∞ users.txt."""
    if not os.path.exists(USERS_FILE):
        return
    try:
        with open(USERS_FILE, "r") as f:
            lines = [line.strip() for line in f if line.strip().isdigit()]
        updated = [line for line in lines if line != str(user_id)]
        with open(USERS_FILE, "w") as f:
            for uid in updated:
                f.write(f"{uid}\n")
    except Exception as e:
        print(f"[remove_user_id] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {USERS_FILE}: {e}")

def remove_approved_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º user_id –∏–∑ —Ñ–∞–π–ª–∞ approved_users.txt."""
    if not os.path.exists(APPROVED_FILE):
        return
    try:
        with open(APPROVED_FILE, "r") as f:
            lines = [line.strip() for line in f]
        updated = [line for line in lines if line != str(user_id)]
        with open(APPROVED_FILE, "w") as f:
            for uid in updated:
                f.write(f"{uid}\n")
    except Exception as e:
        print(f"[remove_approved_user] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {APPROVED_FILE}: {e}")


@dp.message(RenameProfile.waiting_for_rename_approve)
async def process_rename_new_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    data = await state.get_data()
    rename_prompt_id = data.get("rename_prompt_id")
    pending_menu_msg_id = data.get("pending_menu_msg_id")

    # –£–¥–∞–ª—è–µ–º prompt "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è..."
    if rename_prompt_id:
        try:
            await bot.delete_message(message.chat.id, rename_prompt_id)
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è)
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass

    user_id = data.get("approve_user_id")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", new_name):
        await safe_send_message(
            message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -."
        )
        await state.clear()
        return

    result = await execute_script("1", new_name, "30")
    if result["returncode"] == 0:
        save_profile_name(user_id, new_name)
        approve_user(user_id)
        remove_pending(user_id)
        save_user_id(user_id)  # –í–ê–ñ–ù–û! ‚Äî —Å—Ä–∞–∑—É –≤ users.txt
        msg = await safe_send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: <b>{new_name}</b>\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ VPN.",
            parse_mode="HTML",
            reply_markup=create_user_menu(new_name)
        )
        # –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ... –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        try:
            await bot.delete_message(message.chat.id, msg.message_id)
        except Exception:
            pass

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω—É
        stats = get_server_info()
        menu = await show_menu(
            message.chat.id,
            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            create_main_menu()
        )
        set_last_menu_id(message.chat.id, menu.message_id)
    else:
        await safe_send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}"
        )
    await state.clear()




    

async def ensure_user_client(user_id: int):
    client_name = get_profile_name(user_id)
    
    if not await client_exists("openvpn", client_name):
        result = await execute_script("1", client_name, "30")  # –°—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10 –ª–µ—Ç
        if result["returncode"] != 0:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {result['stderr']}")
            return False

    return True


async def update_bot_description():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞.

    –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ("ru").
    """
    async with Bot(token=BOT_TOKEN) as bot:
        await bot.set_my_description(BOT_DESCRIPTION, language_code="ru")


BOT_ABOUT = "–ë–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏ VPN."

def make_users_tab_keyboard(active_tab: str):
    tabs = [
        ("–í—Å–µ",        "users_tab_all"),
        ("üü¢ –û–Ω–ª–∞–π–Ω",  "users_tab_online"),
        ("‚è≥ –ò—Å—Ç–µ–∫–∞—é—Ç", "users_tab_expiring"),
    ]
    buttons = []
    for title, cb in tabs:
        # –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        text = f"¬ª {title} ¬´" if cb == active_tab else title
        buttons.append(InlineKeyboardButton(text=text, callback_data=cb))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


async def update_bot_about():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–û –±–æ—Ç–µ¬ª."""
    async with Bot(token=BOT_TOKEN) as bot:
        await bot.set_my_short_description(BOT_ABOUT, language_code="ru")


def get_external_ip():
    try:
        response = requests.get("https://api.ipify.org", timeout=10)
        if response.status_code == 200:
            return response.text
        return "IP –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except requests.Timeout:
        return "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è."
    except requests.ConnectionError:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"
SERVER_IP = get_external_ip()

def get_server_info():
    ip = SERVER_IP
    uptime_seconds = int(psutil.boot_time())
    uptime = datetime.now() - datetime.fromtimestamp(uptime_seconds)
    cpu = psutil.cpu_percent()
    mem = psutil.virtual_memory().percent
    hostname = socket.gethostname()
    os_version = platform.platform()
    return f"""<b>üíª –°–µ—Ä–≤–µ—Ä:</b> <code>{hostname}</code>
<b>üåê IP:</b> <code>{ip}</code>
<b>üïí –ê–ø—Ç–∞–π–º:</b> <code>{str(uptime).split('.')[0]}</code>
<b>üß† RAM:</b> <code>{mem}%</code>
<b>‚ö° CPU:</b> <code>{cpu}%</code>
<b>üõ† –û–°:</b> <code>{os_version}</code>
"""

# ==== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ====
def create_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="users_menu")],
        [InlineKeyboardButton(text="‚ûï‚ûñ –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å", callback_data="add_del_menu")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="7")],
        [InlineKeyboardButton(text="üì¶ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="8")],
        [InlineKeyboardButton(text="üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data="admin_pending_list")],
        [InlineKeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º", callback_data="server_manage_menu")],
        [InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="announce_menu")],
        [InlineKeyboardButton(text="üü¢ –ö—Ç–æ –æ–Ω–ª–∞–π–Ω", callback_data="who_online")],
#        [InlineKeyboardButton(text="üü¢ –û–Ω–ª–∞–π–Ω VLESS", callback_data="vless_online")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


#–î–ª—è VLESS. –£–±–µ—Ä–∏ ## –∏ –≤—ã—à–µ —Ç–æ–∂–µ. –ì–¥–µ –ø–æ–ª–µ –û–ù–õ–ê–ô–ù VLESS
#@dp.callback_query(lambda c: c.data == "vless_online")
#async def vless_online_handler(callback: types.CallbackQuery):
#    user_id = callback.from_user.id
#
#    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
#    if "3x-ui" not in session.cookies.get_dict():
#        ok = authenticate()
#        if not ok:
#            await bot.send_message(
#                user_id,
#                "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ 3x-UI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥–æ—Å—Ç—É–ø."
#            )
#            await callback.answer()
#            return
#
#    # 2) –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
#    try:
#        resp = session.post(BASE_URL + ONLINES_PATH,
#                            headers={"Content-Type": "application/json"}, timeout=10)
#    except Exception as e:
#        logging.error(f"[VLESS_ONLINE] Network error –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /onlines: {e}")
#        # –£–¥–∞–ª–∏–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é, –ø–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É –∏ –≤–µ—Ä–Ω–µ–º –≥–ª–∞–≤–Ω—É—é
#        try: await callback.message.delete()
#        except: pass
#        err_msg = await bot.send_message(
#            user_id,
#            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω VLESS –∫–ª–∏–µ–Ω—Ç–æ–≤."
#        )
#        await asyncio.sleep(1)
#        try: await err_msg.delete()
#        except: pass
#        stats = get_server_info()
#        menu = await bot.send_message(
#            user_id,
#            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
#            reply_markup=create_main_menu(),
#            parse_mode="HTML"
#        )
#        set_last_menu_id(user_id, menu.message_id)
#        await callback.answer()
#        return
#
#    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP-—Å—Ç–∞—Ç—É—Å
#    if resp.status_code != 200:
#        logging.error(f"[VLESS_ONLINE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å {resp.status_code}, body={resp.text!r}")
#        try: await callback.message.delete()
#        except: pass
#        err_msg = await bot.send_message(
#            user_id,
#            f"‚ùó –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code} –≤–º–µ—Å—Ç–æ JSON."
#        )
#        await asyncio.sleep(1)
#        try: await err_msg.delete()
#        except: pass
#        stats = get_server_info()
#        menu = await bot.send_message(
#            user_id,
#            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
#            reply_markup=create_main_menu(),
#            parse_mode="HTML"
#        )
#        set_last_menu_id(user_id, menu.message_id)
#        await callback.answer()
#        return
#
#    # 4) –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
#    try:
#        data = resp.json()
#    except ValueError as e:
#        logging.error(f"[VLESS_ONLINE] –ù–µ JSON –≤ –æ—Ç–≤–µ—Ç–µ: {e}; content={resp.text!r}")
#        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
#        try: await callback.message.delete()
#        except: pass
#        info_msg = await bot.send_message(
#            user_id,
#            "‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥–ª—è –æ–Ω–ª–∞–π–Ω VLESS."
#        )
#        await asyncio.sleep(1)
#        try: await info_msg.delete()
#        except: pass
#        stats = get_server_info()
#        menu = await bot.send_message(
#            user_id,
#            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
#            reply_markup=create_main_menu(),
#            parse_mode="HTML"
#        )
#        set_last_menu_id(user_id, menu.message_id)
#        await callback.answer()
#        return
#
#    # 5) –ï—Å–ª–∏ JSON —Ä–∞–∑–æ–±—Ä–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º success-—Ñ–ª–∞–≥
#    if not isinstance(data, dict) or not data.get("success"):
#        try: await callback.message.delete()
#        except: pass
#        info_msg = await bot.send_message(
#            user_id,
#            "‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª success=false –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON."
#        )
#        await asyncio.sleep(1)
#        try: await info_msg.delete()
#        except: pass
#        stats = get_server_info()
#        menu = await bot.send_message(
#            user_id,
#            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
#            reply_markup=create_main_menu(),
#            parse_mode="HTML"
#        )
#        set_last_menu_id(user_id, menu.message_id)
#        await callback.answer()
#        return
#
#    # 6) –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–∫–ª–∏–µ–Ω—Ç–æ–≤
#    online_list = data.get("obj", [])
#    if not online_list:
#        try: await callback.message.delete()
#        except: pass
#        info_msg = await bot.send_message(
#            user_id,
#            "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö (–æ–Ω–ª–∞–π–Ω) VLESS –∫–ª–∏–µ–Ω—Ç–æ–≤."
#        )
#        await asyncio.sleep(1)
#        try: await info_msg.delete()
#        except: pass
#        stats = get_server_info()
#        menu = await bot.send_message(
#            user_id,
#            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
#            reply_markup=create_main_menu(),
#            parse_mode="HTML"
#        )
#        set_last_menu_id(user_id, menu.message_id)
#        await callback.answer()
#        return
#
#    # 7) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º
#    text_lines = ["üü¢ <b>–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω VLESS:</b>"]
#    for nickname in online_list:
#        safe_name = nickname.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
#        text_lines.append(f"‚Äì <code>{safe_name}</code>")
#    text = "\n".join(text_lines)
#
#    kb = InlineKeyboardMarkup(inline_keyboard=[
#        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
#    ])
#
#    try:
#        await callback.message.delete()
#    except:
#        pass
#
#    await bot.send_message(
#        user_id,
#        text,
#        parse_mode="HTML",
#        reply_markup=kb,
#        disable_web_page_preview=True
#    )
#    await callback.answer()







@dp.callback_query(lambda c: c.data == "server_manage_menu")
async def server_manage_menu(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    await callback.message.edit_text(
        "üõ† <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º:</b>", 
        reply_markup=create_server_manage_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "restart_bot")
async def handle_bot_restart(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    msg = await callback.message.edit_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ systemd...")
    await callback.answer()
    await asyncio.sleep(1)
    await msg.delete()
    await bot.send_message(
        callback.from_user.id,
        f"{get_server_info()}\n<b>üë®‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        reply_markup=create_main_menu(),
        parse_mode="HTML"
    )

    os.system("systemctl restart vpnbot.service")

@dp.callback_query(lambda c: c.data == "reboot_server")
async def handle_reboot(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    msg = await callback.message.edit_text("üîÅ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    await callback.answer()
    await asyncio.sleep(1)
    await msg.delete()
    await bot.send_message(
        callback.from_user.id,
        f"{get_server_info()}\n<b>üë®‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        reply_markup=create_main_menu(),
        parse_mode="HTML"
    )
    os.system("reboot")


def create_server_manage_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", callback_data="restart_bot")],
        [types.InlineKeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="reboot_server")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ])




@dp.callback_query(lambda c: c.data == "admin_pending_list")
async def show_pending_list(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    # –ù–µ—Ç —Ñ–∞–π–ª–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
    if not os.path.exists(PENDING_FILE):
        await callback.message.delete()
        msg = await bot.send_message(callback.from_user.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        await asyncio.sleep(1)
        try:
            await bot.delete_message(callback.from_user.id, msg.message_id)
        except Exception:
            pass
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!
        stats = get_server_info()
        menu = await bot.send_message(
            callback.from_user.id,
            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        set_last_menu_id(callback.from_user.id, menu.message_id)
        return

    # –§–∞–π–ª –µ—Å—Ç—å, –Ω–æ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç
    with open(PENDING_FILE) as f:
        pending = json.load(f)
    if not pending:
        await callback.message.delete()
        msg = await bot.send_message(callback.from_user.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        await asyncio.sleep(1)
        try:
            await bot.delete_message(callback.from_user.id, msg.message_id)
        except Exception:
            pass
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!
        stats = get_server_info()
        menu = await bot.send_message(
            callback.from_user.id,
            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        set_last_menu_id(callback.from_user.id, menu.message_id)
        return

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
    text = "üìã <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ:</b>\n"
    keyboard = []
    for uid, info in pending.items():
        username = info.get("username") or "-"
        fullname = info.get("fullname") or "-"
        text += f"\nID: <code>{uid}</code> @{username}\n–ò–º—è: {fullname}\n"
        keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{uid}"),
            InlineKeyboardButton(text="‚úèÔ∏è –û–¥–æ–±—Ä–∏—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏", callback_data=f"approve_rename_{uid}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{uid}"),
        ])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")


@dp.callback_query(lambda c: c.data == "add_user")
async def add_user_start(callback: types.CallbackQuery, state: FSMContext):
    # 1) —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –º–µ–Ω—é —É –∞–¥–º–∏–Ω–∞
    await delete_last_menus(callback.from_user.id)

    # 2) –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Telegram-ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏—Ñ—Ä–∞–º–∏)
    msg = await bot.send_message(
        callback.from_user.id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ Telegram-ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
        reply_markup=cancel_markup
    )
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å (–µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ‚ùå)
    await state.update_data(manual_add_msg_id=msg.message_id)

    # 3) –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
    await state.set_state(VPNSetup.entering_user_id)

    await callback.answer()

@dp.message(VPNSetup.entering_user_id)
async def process_manual_user_id(message: types.Message, state: FSMContext):
    user_id_text = message.text.strip()
    data = await state.get_data()
    prev_msg_id = data.get("manual_add_msg_id")

    # 1) —É–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É ‚Äú–≤–≤–µ–¥–∏—Ç–µ Telegram-ID‚Ä¶‚Äù
    if prev_msg_id:
        try:
            await bot.delete_message(message.chat.id, prev_msg_id)
        except Exception:
            pass

    # 2) –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º
    if user_id_text in ("‚ùå", "‚ùå –û—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞"):
        await state.clear()
        await delete_last_menus(message.from_user.id)
        stats = get_server_info()
        await show_menu(message.from_user.id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
        return

    # 3) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã
    if not user_id_text.isdigit():
        warn = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", reply_markup=cancel_markup)
        await asyncio.sleep(1.5)
        try: await warn.delete()
        except: pass
        # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        msg = await bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram-ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=cancel_markup
        )
        await state.update_data(manual_add_msg_id=msg.message_id)
        return

    # 4) –∑–∞–ø–æ–º–∏–Ω–∞–µ–º user_id –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
    manual_user_id = int(user_id_text)
    await state.update_data(manual_user_id=manual_user_id)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —Ü–∏—Ñ—Ä–∞–º–∏)
    try:
        await message.delete()
    except:
        pass

    # –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _ –∏ -)
    msg2 = await bot.send_message(
        message.chat.id,
        f"‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –ø—Ä–æ—Ñ–∏–ª—è</b> –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _ –∏–ª–∏ -), –¥–ª–∏–Ω–æ—é –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        f"–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è OpenVPN/WG/Amnezia (–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).",
        parse_mode="HTML",
        reply_markup=cancel_markup
    )
    await state.update_data(manual_add_msg_id=msg2.message_id)
    await state.set_state(VPNSetup.entering_client_name_manual)


@dp.message(VPNSetup.entering_client_name_manual)
async def process_manual_client_name(message: types.Message, state: FSMContext):
    client_name = message.text.strip()
    data = await state.get_data()
    prev_msg_id = data.get("manual_add_msg_id")
    manual_user_id = data.get("manual_user_id")

    # 1) —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å ‚Äú–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è‚Ä¶‚Äù
    if prev_msg_id:
        try:
            await bot.delete_message(message.chat.id, prev_msg_id)
        except Exception:
            pass

    # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω—ã
    if client_name == "‚ùå" or client_name.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await delete_last_menus(message.from_user.id)
        stats = get_server_info()
        await show_menu(
            message.from_user.id,
            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            create_main_menu()
        )
        return

    # 3) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —à–∞–±–ª–æ–Ω [A-Za-z0-9_-]{1,32}
    if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", client_name):
        warn = await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã, _ –∏–ª–∏ -. –ù–µ –±–æ–ª—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=cancel_markup
        )
        await asyncio.sleep(1.5)
        try:
            await warn.delete()
        except:
            pass

        # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–º
        msg2 = await bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _ –∏–ª–∏ -):",
            reply_markup=cancel_markup
        )
        await state.update_data(manual_add_msg_id=msg2.message_id)
        return

    # 4) –°–æ–∑–¥–∞—ë–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —á–µ—Ä–µ–∑ client.sh:
    result = await execute_script("1", client_name, "30")
    if result["returncode"] != 0:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è <code>{client_name}</code>: {result['stderr']}",
            parse_mode="HTML"
        )
        await state.clear()
        return

    # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º (ID ‚Üî profile_name) –≤ SQLite
    save_profile_name(manual_user_id, client_name)

    # 6) –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ approved_users.txt –∏ users.txt
    approve_user(manual_user_id)
    save_user_id(manual_user_id)

    # 7) –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –ø–æ–ª—É—á–∏–ª VPN (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤ —á–∞—Ç–µ ‚Äî –¥–æ–π–¥—ë—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ;
    #    –µ—Å–ª–∏ –æ–Ω –∑–∞–π–¥—ë—Ç –ø–æ–∑–∂–µ, –ø—Ä–∏ /start –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ approved)
    try:
        await safe_send_message(
            manual_user_id,
            f"‚úÖ –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å VPN <b>{client_name}</b> —Å–æ–∑–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥.",
            parse_mode="HTML",
            reply_markup=create_user_menu(client_name, user_id=manual_user_id)
        )
    except Exception:
        # –í–ø–æ–ª–Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —é–∑–µ—Ä –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É ‚Äî safe_send_message –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.
        pass

    # 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    temp = await message.answer(
        "‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—Ä–∞–∑—É! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ –≤ –±–æ—Ç –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏."
    )
    await asyncio.sleep(1)
    try:
        await temp.delete()
    except Exception:
        pass

    # 9) –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    stats = get_server_info()
    await show_menu(
        message.from_user.id,
        stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        create_main_menu()
    )

    await state.clear()

@dp.callback_query(lambda c: c.data == "users_menu")
async def users_menu(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        try: await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        except: pass
        return

    # –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É ¬´–í—Å–µ¬ª
    await show_users_tab(callback.from_user.id, "users_tab_all")
    try: await callback.answer()
    except: pass


# ==== –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç–º–æ–¥–∑–∏ ====
@dp.callback_query(lambda c: c.data == "users_menu")
async def users_menu(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        try: await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        except: pass
        return

    # –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É ¬´–í—Å–µ¬ª
    await show_users_tab(callback.from_user.id, "users_tab_all")
    try: await callback.answer()
    except: pass

async def show_users_tab(chat_id: int, tab: str):
    # 1) –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–æ–¥–Ω–æ —É–±–∏—Ä–∞–µ–º antizapret-client
    raw_clients = await get_clients("openvpn")
    all_clients = [c for c in raw_clients if c != "antizapret-client"]

    # 2) —Å—Ç—Ä–æ–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω-–∫–ª–∏–µ–Ω—Ç–æ–≤
    open_online = set(get_online_users_from_log().keys())
    wg_online   = set(get_online_wg_peers().keys())
    online_all  = open_online | wg_online

    # 3) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ
    if tab == "users_tab_all":
        clients = all_clients
        header  = "üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>"
    elif tab == "users_tab_online":
        clients = [c for c in all_clients if c in online_all]
        header  = "üü¢ <b>–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:</b>"
    else:  # users_tab_expiring
        clients = []
        for c in all_clients:
            uid = get_user_id_by_name(c)
            info = get_cert_expiry_info(c) if uid else None
            if info and 0 <= info["days_left"] <= 7:
                clients.append(c)
        header = "‚è≥ <b>–ò—Å—Ç–µ–∫–∞—é—Ç (‚â§7–¥):</b>"

    # 2) —Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫
    rows = []
    for c in clients:
        uid   = get_user_id_by_name(c)
        emoji = get_user_emoji(uid) if uid else ""
        if tab == "users_tab_expiring":
            days   = get_cert_expiry_info(c)["days_left"]
            status = f"‚è≥{days}–¥"
        else:
            status = "üü¢" if c in online_all else "üî¥"
        label = f"{emoji+' ' if emoji else ''}{status} {c}"
        cb    = f"manage_userid_{uid}" if uid else f"manage_user_{c}"
        rows.append([InlineKeyboardButton(text=label, callback_data=cb)])

    # 3) –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–æ–≤
    tab_row = make_users_tab_keyboard(tab).inline_keyboard[0]
    rows.append(tab_row)

    # 4) –¥–æ–±–∞–≤–ª—è–µ–º ¬´–ù–∞–∑–∞–¥¬ª
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    # 5) —Å–æ–∑–¥–∞—ë–º —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –Ω–æ–≤—É—é –∫–ª–∞–≤—É
    markup = InlineKeyboardMarkup(inline_keyboard=rows)

    # 6) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    await show_menu(chat_id, header, markup)


@dp.callback_query(lambda c: c.data in {"users_tab_all","users_tab_online","users_tab_expiring"})
async def on_users_tab(callback: types.CallbackQuery):
    await show_users_tab(callback.from_user.id, callback.data)
    try: await callback.answer()
    except: pass




def create_wg_menu(client_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û–±—ã—á–Ω—ã–π VPN",
                callback_data=f"info_wg_vpn_{client_name}"
            ),
            InlineKeyboardButton(
                text="Antizapret (–†–µ–∫–æ–º–µ–Ω–¥—É—é)",
                callback_data=f"info_wg_antizapret_{client_name}"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_user_menu_{client_name}")]
    ])

@dp.callback_query(lambda c: c.data.startswith("info_wg_vpn_"))
async def show_info_wg_vpn(callback: types.CallbackQuery):
    client_name = callback.data.replace("info_wg_vpn_", "")
    text = (
        "üõ° <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É VPN (WireGuard):</b>\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "‚Ä¢ Android üì±\n"
        "‚Ä¢ iOS üì≤\n"
        "‚Ä¢ Windows üíª\n"
        "‚Ä¢ macOS üçè\n"
        "‚Ä¢ Linux üêß\n\n"
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
        "üëâ <a href=https://kosia-zlo.github.io/mysite/faq.html/'>https://kosia-zlo.github.io/mysite/faq.html</a>"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"download_wg_vpn_{client_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_wg_{client_name}")]

    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("info_wg_antizapret_"))
async def show_info_wg_antizapret(callback: types.CallbackQuery):
    client_name = callback.data.replace("info_wg_antizapret_", "")
    text = (
        "üõ° <b>WireGuard + Antizapret:</b>\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "‚Ä¢ Android üì±\n"
        "‚Ä¢ iOS üì≤\n"
        "‚Ä¢ Windows üíª\n"
        "‚Ä¢ macOS üçè\n"
        "‚Ä¢ Linux üêß\n\n"
        "üö´ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DNS –∏ –º–∞—Ä—à—Ä—É—Ç—ã –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.\n\n"
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
        "üëâ <a href='https://kosia-zlo.github.io/mysite/faq.html'>https://kosia-zlo.github.io/mysite/faq.html</a>"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"download_wg_antizapret_{client_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_wg_{client_name}")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()


def create_amnezia_menu(client_name):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û–±—ã—á–Ω—ã–π VPN",
                callback_data=f"info_am_vpn_{client_name}"
            ),
            InlineKeyboardButton(
                text="Antizapret (–†–µ–∫–æ–º–µ–Ω–¥—É—é)",
                callback_data=f"info_am_antizapret_{client_name}"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_user_menu_{client_name}")]
    ])

@dp.callback_query(lambda c: c.data.startswith("info_am_vpn_"))
async def show_info_am_vpn(callback: types.CallbackQuery):
    client_name = callback.data.replace("info_am_vpn_", "")
    text = (
        "üåÄ <b>Amnezia VPN:</b>\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "‚Ä¢ Android üì±\n"
        "‚Ä¢ Windows üíª\n"
        "‚Ä¢ macOS üçè\n\n"
        "üßæ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Amnezia.\n\n"
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
        "üëâ <a href='https://kosia-zlo.github.io/mysite/faq.html'>https://kosia-zlo.github.io/mysite/faq.html</a>"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"download_am_vpn_{client_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_amnezia_{client_name}")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("info_am_antizapret_"))
async def show_info_am_antizapret(callback: types.CallbackQuery):
    client_name = callback.data.replace("info_am_antizapret_", "")
    text = (
        "üåÄ <b>Amnezia VPN + Antizapret:</b>\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "‚Ä¢ Android üì±\n"
        "‚Ä¢ Windows üíª\n"
        "‚Ä¢ macOS üçè\n\n"
        "üö´ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ Antizapret.\n\n"
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
        "üëâ <a href='https://kosia-zlo.github.io/mysite/faq.html'>https://kosia-zlo.github.io/mysite/faq.html</a>"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data=f"download_am_antizapret_{client_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_amnezia_{client_name}")]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()




@dp.callback_query(lambda c: c.data.startswith("get_wg_"))
async def get_wg_menu(callback: types.CallbackQuery):
    client_name = callback.data[len("get_wg_"):]
    await delete_last_menus(callback.from_user.id)
    try:
        await callback.message.delete()
    except Exception:
        pass
    await bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø WireGuard-–∫–æ–Ω—Ñ–∏–≥–∞:",
        reply_markup=create_wg_menu(client_name)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("get_amnezia_"))
async def get_amnezia_menu(callback: types.CallbackQuery):
    client_name = callback.data[len("get_amnezia_"):]
    await delete_last_menus(callback.from_user.id)
    try:
        await callback.message.delete()
    except Exception:
        pass
    await bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø Amnezia-–∫–æ–Ω—Ñ–∏–≥–∞:",
        reply_markup=create_amnezia_menu(client_name)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("download_wg_"))
async def download_wg_config(callback: types.CallbackQuery):
    parts = callback.data.split("_", 3)
    _, _, wg_type, client_name = parts
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    if wg_type == "vpn":
        file_path = f"/root/antizapret/client/wireguard/vpn/{FILEVPN_NAME} - –û–±—ã—á–Ω—ã–π VPN -{client_name}.conf"
    else:
        file_path = f"/root/antizapret/client/wireguard/antizapret/{FILEVPN_NAME} -{client_name}.conf"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        subprocess.run(['/root/antizapret/client.sh', '4', client_name], check=True)

    try:
        await callback.message.delete()
    except Exception:
        pass
    await delete_last_menus(user_id)

    if os.path.exists(file_path):
        await bot.send_document(user_id, FSInputFile(file_path), caption=f"üîê {os.path.basename(file_path)}")
        await notify_admin_download(user_id, username, os.path.basename(file_path), "wg")
    else:
        await bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID), user_id=user_id)
    )

    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("download_wg_"))
async def download_wg_config(callback: types.CallbackQuery):
    parts = callback.data.split("_", 3)
    _, _, wg_type, client_name = parts
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    if wg_type == "vpn":
        file_path = f"/root/antizapret/client/wireguard/vpn/{FILEVPN_NAME} - –û–±—ã—á–Ω—ã–π VPN -{client_name}.conf"
    else:
        file_path = f"/root/antizapret/client/wireguard/antizapret/{FILEVPN_NAME} -{client_name}.conf"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        subprocess.run(['/root/antizapret/client.sh', '4', client_name], check=True)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    try:
        await callback.message.delete()
    except Exception:
        pass
    await delete_last_menus(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(file_path):
        await bot.send_document(user_id, FSInputFile(file_path), caption=f"üîê {os.path.basename(file_path)}")
        await notify_admin_download(user_id, username, os.path.basename(file_path), "wg")
    else:
        await bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID), user_id=user_id)
    )
    await callback.answer()






# ==== –ê–¥–º–∏–Ω: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–∞–π–ª–∞ ====
@dp.callback_query(lambda c: c.data.startswith("set_emoji_"))
async def set_emoji_start(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data[len("set_emoji_"):]
    user_id = callback.from_user.id
    target_user_id = get_user_id_by_name(client_name)
    if not target_user_id:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    await state.set_state(SetEmojiState.waiting_for_emoji)
    await state.update_data(target_user_id=target_user_id, client_name=client_name)

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_set_emoji")]
        ]
    )
    msg = await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏ —Å–º–∞–π–ª (—ç–º–æ–¥–∑–∏) –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å ‚ùå —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–º–∞–π–ª.",
        reply_markup=markup
    )
    # –°–æ—Ö—Ä–∞–Ω–∏–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(input_message_id=msg.message_id)

@dp.callback_query(lambda c: c.data == "cancel_set_emoji")
async def cancel_set_emoji(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg_id = data.get("input_message_id")
    client_name = data.get("client_name")
    try:
        await callback.bot.delete_message(callback.from_user.id, msg_id)
    except:
        pass
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await show_menu(
        callback.from_user.id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=True, user_id=get_user_id_by_name(client_name))
    )



@dp.message(SetEmojiState.waiting_for_emoji)
async def set_emoji_process(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target_user_id = data.get("target_user_id")
    client_name = data.get("client_name")
    input_msg_id = data.get("input_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    try:
        await message.bot.delete_message(message.from_user.id, input_msg_id)
    except:
        pass

    emoji = message.text.strip()
    if emoji == "‚ùå":
        set_user_emoji(target_user_id, "")
        text = "–°–º–∞–π–ª —É–±—Ä–∞–Ω."
    else:
        if len(emoji) > 2:
            warn_msg = await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–º–∞–π–ª!")
            await asyncio.sleep(2)
            await warn_msg.delete()
            return
        set_user_emoji(target_user_id, emoji)
        text = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–º–∞–π–ª: {emoji}"

    # –í—ã–≤–µ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 2 —Å–µ–∫
    notif = await message.answer(text)
    await asyncio.sleep(2)
    try:
        await notif.delete()
    except:
        pass

    await show_menu(
        message.from_user.id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=True, user_id=target_user_id)
    )
    await state.clear()

    
# ==== –í—ã–¥–∞—á–∞ WireGuard ====
@dp.callback_query(lambda c: c.data.startswith("get_wg_"))
async def send_wg_config(callback: types.CallbackQuery):
    client_name = callback.data[len("get_wg_"):]
    user_id = callback.from_user.id
    await execute_script("4", client_name)
    file_path = find_conf("/root/antizapret/client/wireguard", client_name)
    if not file_path:
        await callback.answer("‚ùå –§–∞–π–ª WG –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await bot.send_document(
        user_id,
        FSInputFile(file_path),
        caption=f"üîê WireGuard: {os.path.basename(file_path)}"
    )
    await callback.answer("‚úÖ WireGuard-–∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    
def find_conf(base_dir, client_name):
    # –ò—â–µ—Ç –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö –∏ –ø–æ –≤—Å–µ–º —à–∞–±–ª–æ–Ω–∞–º
    patterns = [
        f"{base_dir}/*/*{client_name}*.conf",
        f"{base_dir}/*{client_name}*.conf",
    ]
    for pattern in patterns:
        files = glob.glob(pattern)
        if files:
            return files[0]
    return None    


def find_wg_conf(client_name):
    patterns = [
        f"/root/antizapret/client/wireguard/*/*{client_name}*.conf",
        f"/root/antizapret/client/wireguard/*{client_name}*.conf",
    ]
    for pattern in patterns:
        files = glob.glob(pattern)
        if files:
            return files[0]
    return None

   

# –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ user_id
@dp.callback_query(lambda c: c.data.startswith("manage_userid_"))
async def manage_user_by_id(callback: types.CallbackQuery):
    target_user_id = int(callback.data.split("_")[-1])
    client_name = get_profile_name(target_user_id)

    await show_menu(
        callback.from_user.id,
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
        create_user_menu(
            client_name,
            back_callback="users_menu",
            is_admin=True,
            user_id=target_user_id   # <-- –ø–µ—Ä–µ–¥–∞–ª–∏ Telegram-ID
        )
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("manage_user_"))
async def manage_user(callback: types.CallbackQuery):
    client_name = callback.data.split("_",2)[-1]
    target_user_id = get_user_id_by_name(client_name)
    await show_menu(
        callback.from_user.id,
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
        create_user_menu(
            client_name,
            back_callback="users_menu",
            is_admin=(callback.from_user.id == ADMIN_ID),
            user_id=target_user_id  # <-- –∑–¥–µ—Å—å
        )
    )
    await callback.answer()


def get_user_id_by_name(profile_name):
    conn = sqlite3.connect("/root/vpn.db")
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE profile_name=?", (profile_name,))
    res = cur.fetchone()
    conn.close()
    return res[0] if res else None



@dp.callback_query(lambda c: c.data == "7")
async def recreate_files(callback: types.CallbackQuery, state: FSMContext):
    result = await execute_script("7")
    if result["returncode"] == 0:
        await callback.message.edit_text("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
        await asyncio.sleep(1)
        try:
            await callback.message.delete()
        except Exception:
            pass
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ–Ω—é!
        await delete_last_menus(callback.from_user.id)
        await state.clear()
        # –î–µ–ª–∞–µ–º —Å –∏–Ω—Ñ–æ–π —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –∞–¥–º–∏–Ω
        if callback.from_user.id == ADMIN_ID:
            stats = get_server_info()
            menu_text = stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
        else:
            menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
        msg = await bot.send_message(callback.from_user.id, menu_text, reply_markup=create_main_menu(), parse_mode="HTML")
        set_last_menu_id(callback.from_user.id, msg.message_id)
    else:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
    await callback.answer()




@dp.callback_query(lambda c: c.data == "announce_menu")
async def admin_announce_menu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ–Ω—é (–ü–†–ê–í–ò–õ–¨–ù–û!)
    await delete_last_menus(user_id)

    # –û–¥–Ω–æ –Ω–æ–≤–æ–µ —á–µ—Ä–µ–∑ show_menu!
    msg = await show_menu(
        user_id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    )
    await state.update_data(announce_msg_id=msg.message_id)
    await state.set_state(AdminAnnounce.waiting_for_text)
    await callback.answer()



 
@dp.message(AdminAnnounce.waiting_for_text)
async def process_announce_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    announce_msg_id = data.get("announce_msg_id")

    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Ñ–æ—Ä–º—É
    try:
        await bot.delete_message(user_id, message.message_id)
        if announce_msg_id:
            await bot.delete_message(user_id, announce_msg_id)
    except Exception:
        pass

    text = message.text.strip()
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û—á–∏—Å—Ç–∏–ª–∏ –≤—Å—ë ‚Äî —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ show_menu
        await state.clear()
        stats = get_server_info()
        await show_menu(user_id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
        return

    if not text:
        # –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Äî –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        msg = await show_menu(
            user_id,
            "‚úèÔ∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            )
        )
        await state.update_data(announce_msg_id=msg.message_id)
        return

    # –∏–Ω–∞—á–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º
    sent, failed = await announce_all(text)
    await bot.send_message(user_id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")
    await state.clear()
    stats = get_server_info()
    await show_menu(user_id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())



async def announce_all(text):
    if not os.path.exists(USERS_FILE):
        return 0, 0

    sent, failed = 0, 0
    with open(USERS_FILE) as f:
        users = [line.strip() for line in f if line.strip().isdigit()]
    for uid in users:
        try:
            await bot.send_message(uid, f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n{text}", parse_mode="HTML")
            sent += 1
        except Exception as e:
            failed += 1
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

    return sent, failed


@dp.callback_query(lambda c: c.data == "8")
async def backup_files(callback: types.CallbackQuery):
    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...")
    result = await execute_script("8")
    if result["returncode"] == 0:
        if await send_backup(callback.from_user.id):
            await callback.message.delete()
            # –¢–æ –∂–µ —Å–∞–º–æ–µ, –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π!
            if callback.from_user.id == ADMIN_ID:
                stats = get_server_info()
                menu_text = stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
            else:
                menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
            await bot.send_message(callback.from_user.id, menu_text, reply_markup=create_main_menu(), parse_mode="HTML")
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø")
    else:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {result['stderr']}")
    await callback.answer()



@dp.callback_query(lambda c: c.data == "del_user")
async def del_user_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await delete_last_menus(user_id)  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å—é–¥–∞!
    clients = await get_clients("openvpn")
    if not clients:
        await show_menu(user_id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", create_main_menu())
        return
    keyboard = [
        [InlineKeyboardButton(text=client, callback_data=f"ask_del_{client}")]
        for client in clients
    ]
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="add_del_menu")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    msg = await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    set_last_menu_id(user_id, msg.message_id)
    await callback.answer()






@dp.callback_query(lambda c: c.data.startswith("ask_del_"))
async def ask_delete_user(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    client_name = callback.data.split("_", 2)[-1]
    await delete_last_menus(user_id)  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ!
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{client_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="del_user")]
        ]
    )
    await bot.send_message(user_id, f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>?", reply_markup=markup, parse_mode="HTML")
    await callback.answer()



@dp.callback_query(lambda c: c.data.startswith("confirm_del_"))
async def confirm_delete_user(callback: types.CallbackQuery):
    client_name = callback.data.split("_", 2)[-1]
    admin_id = callback.from_user.id

    # 1) –£–∑–Ω–∞—ë–º user_id –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    target_user_id = get_user_id_by_name(client_name)

    # 2) –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    result = await execute_script("2", client_name)

    # 3) –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try:
        await callback.message.delete()
    except Exception:
        pass

    # 4) –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏–ª –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –æ—à–∏–±–æ–∫, —á–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã —Å ID
    if result["returncode"] == 0:
        if target_user_id is not None:
            remove_approved_user(target_user_id)
            remove_user_id(target_user_id)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            cur.execute("DELETE FROM users WHERE id=?", (target_user_id,))
            conn.commit()
            conn.close()

        stats = get_server_info()
        await show_menu(
            admin_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{client_name}</b> —É–¥–∞–ª—ë–Ω.\n\n{stats}\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            create_main_menu()
        )
    else:
        stats = get_server_info()
        await show_menu(
            admin_id,
            f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {result['stderr']}\n\n{stats}\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            create_main_menu()
        )

    await callback.answer()



def get_cert_expiry_days(cert_path):
    try:
        result = subprocess.run(
            ["openssl", "x509", "-in", cert_path, "-noout", "-enddate"],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        if result.returncode != 0:
            return 30  # fallback, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        not_after = result.stdout.strip().replace("notAfter=", "")
        dt = datetime.strptime(not_after, '%b %d %H:%M:%S %Y %Z').replace(tzinfo=timezone.utc)
        days_left = (dt - datetime.now(timezone.utc)).days
        return max(days_left, 1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return 30  # fallback

def create_openvpn_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é OpenVPN –≤ –≤–∏–¥–µ InlineKeyboardMarkup."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="1"),
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="2"),
            ],
            [
                InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="3"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
            ],
        ]
    )

@dp.callback_query(lambda c: c.data == "rename_cancel")
async def rename_cancel(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–æ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    client_name = data.get("old_username")

    await state.clear()
    await delete_last_menus(user_id)

    is_admin = (user_id == ADMIN_ID)
    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=is_admin)
    )

    await callback.answer()







@dp.callback_query(lambda c: c.data.startswith("rename_profile_"))
async def start_rename_profile(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    old_username = callback.data.split("_", 2)[-1]
    await state.update_data(old_username=old_username)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—à–ª—ã–µ –º–µ–Ω—é
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()  # –í–ê–ñ–ù–û: —É–¥–∞–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!
    except Exception:
        pass

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rename_cancel")]
        ]
    )
    msg = await bot.send_message(
        user_id,
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (—Å–µ–π—á–∞—Å: <b>{old_username}</b>):",
        parse_mode="HTML",
        reply_markup=markup
    )
    set_last_menu_id(user_id, msg.message_id)
    await state.set_state(RenameProfile.waiting_for_new_name)
    await callback.answer()



async def show_menu(user_id, text, reply_markup, parse_mode="HTML"):
    await delete_last_menus(user_id)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—à–ª—ã–µ –º–µ–Ω—é —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
    msg = await bot.send_message(user_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
    set_last_menu_id(user_id, msg.message_id)
    return msg


@dp.callback_query(lambda c: c.data.startswith("get_amnezia_"))
async def send_amnezia_config(callback: types.CallbackQuery):
    client_name = callback.data[len("get_amnezia_"):]
    user_id = callback.from_user.id
    # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π!
    await execute_script("4", client_name)
    file_path = find_conf("/root/antizapret/client/amneziawg", client_name)
    if not file_path:
        await callback.answer("‚ùå –§–∞–π–ª Amnezia –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await bot.send_document(
        user_id,
        FSInputFile(file_path),
        caption=f"üîê Amnezia: {os.path.basename(file_path)}"
    )
    await callback.answer("‚úÖ Amnezia-–∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")



@dp.callback_query(lambda c: c.data.startswith("download_am_"))
async def download_amnezia_config(callback: types.CallbackQuery):
    parts = callback.data.split("_", 3)
    _, _, am_type, client_name = parts
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    if am_type == "vpn":
        file_path = f"/root/antizapret/client/amneziawg/vpn/{FILEVPN_NAME} - –û–±—ã—á–Ω—ã–π VPN -{client_name}.conf"
    else:
        file_path = f"/root/antizapret/client/amneziawg/antizapret/{FILEVPN_NAME} -{client_name}.conf"

    if not os.path.exists(file_path):
        subprocess.run(['/root/antizapret/client.sh', '4', client_name], check=True)

    try:
        await callback.message.delete()
    except Exception:
        pass
    await delete_last_menus(user_id)

    if os.path.exists(file_path):
        await bot.send_document(user_id, FSInputFile(file_path), caption=f"üîê {os.path.basename(file_path)}")
        await notify_admin_download(user_id, username, os.path.basename(file_path), "amnezia")
    else:
        await bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await show_menu(
        user_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID), user_id=user_id)
    )

    await callback.answer()




# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
def create_openvpn_config_menu(client_name: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="VPN", callback_data=f"openvpn_config_vpn_{client_name}"
                ),
                InlineKeyboardButton(
                    text="Antizapret",
                    callback_data=f"openvpn_config_antizapret_{client_name}",
                ),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_client_list")],
        ]
    )


def create_openvpn_protocol_menu(interface: str, client_name: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (auto)",
                    callback_data=f"send_ovpn_{interface}_default_{client_name}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="TCP", callback_data=f"send_ovpn_{interface}_tcp_{client_name}"
                ),
                InlineKeyboardButton(
                    text="UDP", callback_data=f"send_ovpn_{interface}_udp_{client_name}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"back_to_interface_{interface}_{client_name}",
                )
            ],
        ]
    )

def create_client_list_keyboard(clients, page, total_pages, vpn_type, action):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ VPN."""
    buttons = []
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE

    for client in clients[start_idx:end_idx]:
        prefix = "delete" if action == "delete" else "client"
        callback_data = f"{action}_{vpn_type}_{client}"

        if action == "delete":
            callback_data = f"delete_{vpn_type}_{client}"
        else:  # –¥–µ–π—Å—Ç–≤–∏–µ "client" (–≤—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
            callback_data = f"client_{vpn_type}_{client}"

        buttons.append([InlineKeyboardButton(text=client, callback_data=callback_data)])

    pagination = []
    if page > 1:
        pagination.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{action}_{vpn_type}_{page-1}"
            )
        )
    if page < total_pages:
        pagination.append(
            InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page_{action}_{vpn_type}_{page+1}"
            )
        )

    if pagination:
        buttons.append(pagination)

    buttons.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{vpn_type}_menu")]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_confirmation_keyboard(client_name, vpn_type):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_{vpn_type}_{client_name}",
                ),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"),
            ]
        ]
    )

def get_user_traffic(client_name):
    log_files = [
        "/etc/openvpn/server/logs/antizapret-tcp-status.log",
        "/etc/openvpn/server/logs/antizapret-udp-status.log",
        "/etc/openvpn/server/logs/vpn-tcp-status.log",
        "/etc/openvpn/server/logs/vpn-udp-status.log",
    ]
    total_received = 0
    total_sent = 0
    for log_path in log_files:
        try:
            if os.path.exists(log_path):
                with open(log_path) as f:
                    for line in f:
                        if line.startswith("CLIENT_LIST"):
                            parts = line.strip().split(",")
                            if len(parts) > 4 and parts[1] == client_name:
                                # parts[3]: Bytes received
                                # parts[4]: Bytes sent
                                try:
                                    total_received += int(parts[3])
                                    total_sent += int(parts[4])
                                except Exception:
                                    continue
        except Exception:
            continue
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ì–± (1 –ì–± = 1024^3 –±–∞–π—Ç)
    gb_received = total_received / (1024**3)
    gb_sent = total_sent / (1024**3)
    return round(gb_sent, 2), round(gb_received, 2)

@dp.callback_query(lambda c: c.data.startswith("renew_user_"))
async def renew_user_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    client_name = callback.data.split("_", 2)[-1]
    target_user_id = get_user_id_by_name(client_name)
    if target_user_id is None:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ client_name, –∏ —Ä–µ–∞–ª—å–Ω—ã–π Telegram-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(client_name=client_name, target_user_id=target_user_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é —É –∞–¥–º–∏–Ω–∞
    await delete_last_menus(callback.from_user.id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –Ω–æ–≤—ã–π —Å—Ä–æ–∫
    msg = await bot.send_message(
        callback.from_user.id,
        (
            f"‚úèÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è <b>(–≤ –¥–Ω—è—Ö)</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{client_name}</code>:\n"
            f"<b>‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–æ–≤—ã–º!</b>"
        ),
        parse_mode="HTML",
        reply_markup=cancel_markup
    )
    # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    await state.update_data(renew_msg_ids=[msg.message_id])
    await state.set_state(VPNSetup.entering_days)
    await callback.answer()





from datetime import datetime, timezone

def get_cert_expiry_info(client_name):
    cert_path = f"/etc/openvpn/easyrsa3/pki/issued/{client_name}.crt"
    try:
        result = subprocess.run(
            ["openssl", "x509", "-in", cert_path, "-noout", "-enddate"],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        if result.returncode != 0:
            return None
        not_after = result.stdout.strip().replace("notAfter=", "")
        date_to = datetime.strptime(not_after, '%b %d %H:%M:%S %Y %Z').replace(tzinfo=timezone.utc)
        now = datetime.now(timezone.utc)
        days_left = (date_to - now).days

        # –¢–µ–ø–µ—Ä—å —É–∑–Ω–∞—ë–º –¥–∞—Ç—É –≤—ã–ø—É—Å–∫–∞ (startdate)
        result2 = subprocess.run(
            ["openssl", "x509", "-in", cert_path, "-noout", "-startdate"],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        not_before = result2.stdout.strip().replace("notBefore=", "")
        date_from = datetime.strptime(not_before, '%b %d %H:%M:%S %Y %Z').replace(tzinfo=timezone.utc)

        return {
            "date_from": date_from,
            "date_to": date_to,
            "days_left": days_left
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return None


@dp.message(VPNSetup.entering_days)
async def process_renew_days(message: types.Message, state: FSMContext):
    data = await state.get_data()
    admin_id       = message.from_user.id
    target_user_id = data.get("target_user_id")
    client_name    = data.get("client_name")
    renew_msg_ids  = data.get("renew_msg_ids", [])

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for mid in set(renew_msg_ids):
        try:
            await bot.delete_message(admin_id, mid)
        except:
            pass
    await state.update_data(renew_msg_ids=[])

    text = message.text.strip()
    if text.lower() in ("‚ùå –æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞"):
        await state.clear()
        await show_menu(
            admin_id,
            f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
            create_user_menu(client_name, back_callback="users_menu", is_admin=True, user_id=target_user_id)
        )
        return

    if not text.isdigit() or int(text) < 1:
        warn = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (>0)", reply_markup=cancel_markup)
        await asyncio.sleep(1.5)
        try: await warn.delete()
        except: pass
        return

    days = int(text)
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    msg_wait = await message.answer(
        f"‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ <b>{client_name}</b> –Ω–∞ {days} –¥–Ω–µ–π...",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.update_data(renew_msg_ids=[msg_wait.message_id])

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    result = await execute_script("9", client_name, str(days))

    # –£–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        await bot.delete_message(admin_id, msg_wait.message_id)
    except:
        pass

    # –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    cert_info = get_cert_expiry_info(client_name)
    if cert_info:
        date_to_str = cert_info["date_to"].strftime('%d.%m.%Y')
        days_left   = cert_info["days_left"]
        status_text = f"–¥–æ <b>{date_to_str}</b> (–æ—Å—Ç–∞–ª–æ—Å—å <b>{days_left}</b> –¥.)"
    else:
        status_text = "—Ç–æ—á–Ω—É—é –¥–∞—Ç—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å"

    if result["returncode"] == 0:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            target_user_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ–π VPN –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ <b>{days}</b> –¥–Ω–µ–π ‚Äî {status_text}!",
            parse_mode="HTML"
        )
        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            admin_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{client_name}</b> –ø—Ä–æ–¥–ª—ë–Ω {status_text}.",
            parse_mode="HTML"
        )
    else:
        # –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            admin_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {result['stderr']}",
            parse_mode="HTML"
        )

    # –í–µ—Ä–Ω—É—Ç—å –∞–¥–º–∏–Ω–∞ –≤ –º–µ–Ω—é
    await show_menu(
        admin_id,
        f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=True, user_id=target_user_id)
    )
    await state.clear()



# ==== –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Å —ç–º–æ–¥–∑–∏ –∏ WG/Amnezia –∫–Ω–æ–ø–∫–∞–º–∏) ====
def create_user_menu(
    client_name: str,
    *,
    back_callback: str | None = None,
    is_admin: bool = False,
    user_id: int | None = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    - client_name ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.
    - back_callback ‚Äî callback_data –∫–Ω–æ–ø–∫–∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.
    - is_admin ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏.
    - user_id ‚Äî Telegram-ID –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è url-–∫–Ω–æ–ø–∫–∏).
    """

    keyboard: list[list[InlineKeyboardButton]] = [
        [
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"user_stats_{client_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ OpenVPN",
                callback_data=f"select_openvpn_{client_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üåê –ü–æ–ª—É—á–∏—Ç—å WireGuard",
                callback_data=f"get_wg_{client_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="ü¶Ñ –ü–æ–ª—É—á–∏—Ç—å Amnezia",
                callback_data=f"get_amnezia_{client_name}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì¨ –ü–æ–ª—É—á–∏—Ç—å VLESS",
                callback_data=f"get_vless_{client_name}"
            )
        ],
    ]

    if is_admin:
        # –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è",
                callback_data=f"rename_profile_{client_name}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="ü§° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–º–∞–π–ª",
                callback_data=f"set_emoji_{client_name}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è",
                callback_data=f"renew_user_{client_name}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"delete_user_{client_name}"
            )
        ])

        # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
        if back_callback:
            keyboard.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=back_callback
                )
            ])
    else:
        # –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([
            InlineKeyboardButton(
                text="üí¨ –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                url="https://kosia-zlo.github.io/mysite/"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                text="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è",
                url="https://kosia-zlo.github.io/mysite/faq.html"
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)



@dp.callback_query(lambda c: c.data.startswith("delete_user_"))
async def delete_user_from_user_menu(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_", 2)[-1]
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_del_{client_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_user_{client_name}")]
        ]
    )
    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>?",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await callback.answer()



#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(RenameProfile.waiting_for_new_name)
async def handle_new_username(message: types.Message, state: FSMContext):
    new_username = message.text.strip()
    data = await state.get_data()
    old_username = data.get("old_username")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", new_username):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ —Å—Ç–∞—Ä–æ–º—É –∏–º–µ–Ω–∏
    user_id = None
    conn = sqlite3.connect("/root/vpn.db")
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE profile_name=?", (old_username,))
    res = cur.fetchone()
    if res:
        user_id = res[0]
    conn.close()
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Å—Ç–∞—Ä–æ–º—É –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return

    # –£–∑–Ω–∞—ë–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å —É —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    old_cert_path = f"/etc/openvpn/easyrsa3/pki/issued/{old_username}.crt"
    days_left = get_cert_expiry_days(old_cert_path)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    result_del = await execute_script("2", old_username)
    if result_del["returncode"] != 0:
        stderr = result_del.get("stderr", "")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {stderr}")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    result_add = await execute_script("1", new_username, str(days_left))
    if result_add["returncode"] != 0:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {result_add['stderr']}")
        await state.clear()
        return

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ
    save_profile_name(user_id, new_username)

    await delete_last_menus(message.from_user.id)
    await show_menu(
        message.from_user.id,
        "‚úÖ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π üì• <b>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ OpenVPN</b>.",
        create_user_menu(new_username, back_callback="users_menu", is_admin=(message.from_user.id == ADMIN_ID))
    )
    await state.clear()









def get_cert_expiry_days_for_user(client_name):
    cert_path = f"/etc/openvpn/client/keys/{client_name}.crt"
    return get_cert_expiry_days(cert_path)

async def get_config_stats(client_name):
    days_left = get_cert_expiry_days_for_user(client_name)
    now = datetime.now()
    date_from = now
    date_to = now + timedelta(days=days_left)
    return {
        "date_from": date_from.strftime("%d.%m.%Y"),
        "date_to": date_to.strftime("%d.%m.%Y"),
        "days_left": days_left
    }

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data.startswith("user_stats_"))
async def user_stats(callback: types.CallbackQuery):
    client_name = callback.data[len("user_stats_"):]
    user_id = callback.from_user.id

    # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
    cert_info = get_cert_expiry_info(client_name)
    if cert_info:
        date_from_str = cert_info["date_from"].strftime('%d.%m.%Y')
        date_to_str   = cert_info["date_to"].strftime('%d.%m.%Y')
        days_left     = cert_info["days_left"]
        cert_block = (
            f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            f"‚Ä¢ –° {date_from_str} –ø–æ {date_to_str}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å <b>{days_left}</b> –¥–Ω–µ–π\n"
        )
    else:
        cert_block = "<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
    text = cert_block

    # 1) –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∫–Ω–æ ¬´–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø¬ª –∏–ª–∏ —Å—Ç–∞—Ä—ã–π stats-—ç–∫—Ä–∞–Ω)
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # 2) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ ¬´–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º¬ª —á–µ—Ä–µ–∑ show_menu():
    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω—É ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await show_menu(
            user_id,
            text,
            create_user_menu(client_name, back_callback="users_menu", is_admin=True)
        )
    else:
        # –û–±—ã—á–Ω–æ–º—É —é–∑–µ—Ä—É ‚Äî –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª
        await show_menu(
            user_id,
            text,
            create_user_menu(client_name, is_admin=False)
        )

    await callback.answer()






async def execute_script(option: str, client_name: str = None, days: str = None):
    script_path = "/root/antizapret/client.sh"
    if not os.path.exists(script_path):
        return {
            "returncode": 1,
            "stdout": "",
            "stderr": f"‚ùå –§–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
        }
    command = f"{script_path} {option}"
    if option not in ["8", "7"] and client_name:
        command += f" {client_name}"
        if days and option == "1" or option == "9":
            command += f" {days}"
    try:
        env = os.environ.copy()
        env["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        process = await asyncio.create_subprocess_shell(
            command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            env=env,
        )
        stdout, stderr = await process.communicate()
        # –î–æ–±–∞–≤—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞!
        print("==[DEBUG EXEC]==")
        print("COMMAND:", command)
        print("RET:", process.returncode)
        print("STDOUT:", stdout.decode())
        print("STDERR:", stderr.decode())
        print("==[END DEBUG]==")
        return {
            "returncode": process.returncode,
            "stdout": stdout.decode().strip(),
            "stderr": stderr.decode().strip(),
        }
    except Exception as e:
        return {
            "returncode": 1,
            "stdout": "",
            "stderr": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}",
        }


async def send_single_config(chat_id: int, path: str, caption: str):
    if os.path.exists(path):
        await bot.send_document(
            chat_id, document=FSInputFile(path), caption=f"üîê {caption}"
        )
        return True
    return False


#–ö—Ç–æ –æ–Ω–ª–∞–π–Ω
def get_online_users_from_log():
    """
    –°–æ–±–∏—Ä–∞–µ—Ç CLIENT_LIST –∏–∑ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä—ë—Ö status-—Ñ–∞–π–ª–æ–≤ OpenVPN
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """
    status_files = [
        "/etc/openvpn/server/logs/antizapret-tcp-status.log",
        "/etc/openvpn/server/logs/antizapret-udp-status.log",
        "/etc/openvpn/server/logs/vpn-tcp-status.log",
        "/etc/openvpn/server/logs/vpn-udp-status.log",
    ]
    users = {}  # client_name -> "OpenVPN"

    for path in status_files:
        if not os.path.exists(path):
            continue
        with open(path) as f:
            for line in f:
                # CLIENT_LIST ‚Äî —ç—Ç–æ –≤—Å–µ –∂–∏–≤—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –º–æ–º–µ–Ω—Ç —Å–Ω–∏–º–∫–∞
                if not line.startswith("CLIENT_LIST,"):
                    continue
                parts = line.strip().split(",")
                if len(parts) >= 2 and parts[1]:
                    users[parts[1]] = "OpenVPN"

    return users

def get_online_wg_peers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö WireGuard/Amnezia-–∫–ª–∏–µ–Ω—Ç–æ–≤:
    –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏ wg show all latest-handshakes, –≥–¥–µ
    ts != 0, –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º pubkey‚Üíclient –ø–æ .conf-—Ñ–∞–π–ª–∞–º.
    """
    peers = {}
    try:
        out = subprocess.run(
            ["wg", "show", "all", "latest-handshakes"],
            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True
        ).stdout
        for line in out.splitlines():
            parts = line.split()
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ ‚Äú<pubkey> <timestamp>‚Äù
            if len(parts) != 2:
                continue
            pubkey, ts = parts
            if ts == "0":
                continue

            # –∏—â–µ–º, –≤ –∫–∞–∫–æ–º .conf –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —ç—Ç–æ—Ç pubkey
            for base_dir, label in [
                ("/root/antizapret/client/amneziawg", "Amnezia"),
                ("/root/antizapret/client/wireguard", "WG")
            ]:
                found = False
                for root, _, files in os.walk(base_dir):
                    for fn in files:
                        if not fn.endswith(".conf"):
                            continue
                        try:
                            with open(os.path.join(root, fn), encoding="utf-8", errors="ignore") as cf:
                                if pubkey in cf.read():
                                    client = fn.rsplit("-", 1)[-1].rsplit(".", 1)[0]
                                    peers[client] = label
                                    found = True
                                    break
                        except Exception:
                            pass
                    if found:
                        break
                if found:
                    break
    except Exception as e:
        print(f"[ERROR] wg show: {e}")
    return peers

@dp.callback_query(lambda c: c.data == "who_online")
async def who_online(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º OpenVPN –∏ WG/Amnezia
    openvpn_map = get_online_users_from_log()  # {client_name: "OpenVPN"}
    wg_map      = get_online_wg_peers()       # {client_name: "WG" –∏–ª–∏ "Amnezia"}

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º OpenVPN –∏ WG-–∫–ª–∏–µ–Ω—Ç–æ–≤
    merged = dict(openvpn_map)
    for client, proto in wg_map.items():
        if client not in merged:
            merged[client] = proto

    # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if not merged:
        try:
            await callback.message.edit_text("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω")
        except:
            try:
                await callback.message.delete()
                await callback.bot.send_message(user_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω")
            except:
                pass
        await asyncio.sleep(2)
        try:
            await callback.message.delete()
        except:
            pass
        stats = get_server_info()
        await callback.bot.send_message(
            user_id,
            stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    try:
        await callback.message.delete()
    except:
        pass

    # –°—Ç—Ä–æ–∏–º –Ω–æ–≤–æ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = []
    text_lines = ["üü¢ <b>–ö—Ç–æ –≤ —Å–µ—Ç–∏:</b>"]
    for client in merged.keys():
        # –ü–æ–ª—É—á–∞–µ–º Telegram-ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
        uid = get_user_id_by_name(client)
        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–º–∞–π–ª–∏–∫ (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω)
        emoji = get_user_emoji(uid) if uid else ""
        # –°–∫–ª–µ–∏–≤–∞–µ–º –º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
        label = f"{emoji + ' ' if emoji else ''}{client}"
        buttons.append([
            InlineKeyboardButton(text=label, callback_data=f"manage_online_{client}")
        ])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.bot.send_message(
        user_id,
        "\n".join(text_lines),
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()







@dp.callback_query(lambda c: c.data.startswith("manage_online_"))
async def manage_online_user(callback: types.CallbackQuery):
    client_name = callback.data[len("manage_online_"):]
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ–Ω—é
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except:
        pass

    # –í–µ–∑–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π create_user_menu, –Ω–æ —Å back_callback="who_online"
    await show_menu(
        user_id,
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="who_online", is_admin=(user_id == ADMIN_ID))
    )
    await callback.answer()






@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await delete_last_menus(user_id)  # ‚Üê –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ

    # –£–¥–∞–ª—è–µ–º –í–°–ï –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–æ–∏ –º–µ–Ω—é (N —à—Ç—É–∫)
    for mid in get_last_menu_ids(user_id):
        try:
            await bot.delete_message(user_id, mid)
        except Exception:
            pass

    # –î–∞–ª—å—à–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ:
    if user_id == ADMIN_ID:
        info = get_server_info()
        msg = await message.answer(
            info + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>",
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        set_last_menu_id(user_id, msg.message_id)
        await state.set_state(VPNSetup.choosing_option)
        return

    if is_approved_user(user_id):
        save_user_id(user_id)
        client_name = get_profile_name(user_id)
        if not await client_exists("openvpn", client_name):
            result = await execute_script("1", client_name, "30")
            if result["returncode"] != 0:
                msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                set_last_menu_id(user_id, msg.message_id)
                return
        msg = await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, <b>—Ç–≤–æ–π VPN-–∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=create_user_menu(client_name, user_id=user_id)
        )
        set_last_menu_id(user_id, msg.message_id)
        return

    if is_pending(user_id):
        msg = await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        set_last_menu_id(user_id, msg.message_id)
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="send_request")]
    ])
    msg = await message.answer(
        "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ VPN. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", reply_markup=markup)
    set_last_menu_id(user_id, msg.message_id)





@dp.callback_query(lambda c: c.data == "send_request")
async def send_request(callback: types.CallbackQuery):
    print("[SEND_REQUEST] send_request –≤—ã–∑–≤–∞–Ω")
    user_id = callback.from_user.id
    if is_pending(user_id):
        await callback.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", show_alert=True)
        return
    add_pending(user_id, callback.from_user.username, callback.from_user.full_name)
    # –®–ª—ë–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äî –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–ø—Ä–∏–Ω—è—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –û–¥–æ–±—Ä–∏—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏", callback_data=f"approve_rename_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])
    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    print(f"[DEBUG] markup: {markup}")
    print(f"[DEBUG] text: {f'üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>...'}")

    await safe_send_message(
        ADMIN_ID,
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\nID: <code>{user_id}</code>\nUsername: @{callback.from_user.username or '-'}\n–ò–º—è: {callback.from_user.full_name or '-'}",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", show_alert=True)






@dp.callback_query(lambda c: c.data == "add_del_menu")
async def add_del_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await show_menu(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="del_user")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )
    await callback.answer()







async def client_exists(vpn_type: str, client_name: str) -> bool:
    clients = await get_clients(vpn_type)
    return client_name in clients


@dp.callback_query(lambda c: c.data == "main_menu")
async def handle_main_menu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Å—ë —á—Ç–æ –µ—Å—Ç—å —É —é–∑–µ—Ä–∞
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    await state.clear()
    stats = get_server_info()
    await show_menu(
        user_id,
        stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        create_main_menu()
    )
    await callback.answer()







# 2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ü–æ–ª—É—á–∏—Ç—å VLESS¬ª ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω
@dp.callback_query(lambda c: c.data.startswith("get_vless_"))
async def send_vless_link(callback: types.CallbackQuery):
    client_name = callback.data.split("_", 2)[-1]
    user_id = callback.from_user.id

    # 1) –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–∑–∞–≤–∏—Å—à–∏—Ö¬ª –∫–Ω–æ–ø–æ–∫
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # 2) –ì–æ—Ç–æ–≤–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ client_name
    vless_file_path = f"/root/vless-configs/{client_name}.txt"

    if os.path.exists(vless_file_path):
        # 3) –ß–∏—Ç–∞–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ñ–∞–π–ª–∞
        try:
            with open(vless_file_path, "r", encoding="utf-8") as f:
                vless_link = f.read().strip()
        except Exception as e:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –≤—ã–¥–∞—ë–º –æ—à–∏–±–∫—É
            await bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ VLESS: {e}")
            await callback.answer()
            return

        # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –≤—Å—Ç–∞–≤–ª—è—è —Å—Å—ã–ª–∫—É
        text = (
            "<b>üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VLESS:</b>\n"
            "üëâ <a href=\"https://kosia-zlo.github.io/mysite/faq.html/\">https://kosia-zlo.github.io/mysite/faq.html</a>\n\n"
            "üîê <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
            f"<code>{vless_link}</code>\n\n"
            "üì± <b>Android</b>: v2rayNG, NekoBox, v2RayTun\n"
            "üçé <b>iOS</b>: Streisand, FoXray, V2Box, Shadowrocket\n"
            "üíª <b>Windows</b>: Furious, InvisibleMan, Nekoray\n"
            "üçè <b>macOS</b>: V2Box, FoXray, Nekoray, V2RayXS\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."
        )

        # 5) –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                     callback_data=f"back_to_user_menu_{client_name}")
            ]]
        )

        await bot.send_message(
            user_id,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=keyboard
        )
        await callback.answer()

    else:
        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ client_name –Ω–µ—Ç —Ñ–∞–π–ª–∞ ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await bot.send_message(
            user_id,
            f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VLESS –¥–ª—è <b>{client_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()



@dp.callback_query(lambda c: c.data.startswith("back_to_user_menu_"))
async def back_to_user_menu(callback: types.CallbackQuery):
    client_name = callback.data[len("back_to_user_menu_"):]
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Å—ë, —á—Ç–æ —Ç–∞–º –±—ã–ª–æ
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
    await show_menu(
        user_id,
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID))
    )
    await callback.answer()


    

@dp.callback_query(lambda c: c.data.startswith("cancel_openvpn_") or c.data == "select_openvpn_back")
async def back_from_openvpn(callback: types.CallbackQuery, state: FSMContext):
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback.data:
    # –µ—Å–ª–∏ data = "cancel_openvpn_config_<client_name>"
    if callback.data.startswith("cancel_openvpn_config_"):
        client_name = callback.data[len("cancel_openvpn_config_"):]
    # (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) –µ—Å–ª–∏ data = "cancel_openvpn_<client_name>"
    elif callback.data.startswith("cancel_openvpn_"):
        client_name = callback.data[len("cancel_openvpn_"):]
    else:
        # –í–∞—Ä–∏–∞–Ω—Ç "select_openvpn_back"
        data = await state.get_data()
        client_name = data.get("client_name")
        if not client_name:
            stats = get_server_info()
            await show_menu(callback.from_user.id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
            await callback.answer()
            return

    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ "config_")
    await show_menu(
        user_id,
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
        create_user_menu(client_name, back_callback="users_menu", is_admin=(user_id == ADMIN_ID))
    )
    await state.clear()
    await callback.answer()

 


@dp.callback_query(lambda c: c.data.startswith("client_"))
async def handle_client_selection(callback: types.CallbackQuery, state: FSMContext):
    _, vpn_type, client_name = callback.data.split("_", 2)
    await state.update_data(client_name=client_name, vpn_type=vpn_type)

    if vpn_type == "openvpn":
        await callback.message.delete()
        await bot.send_message(
            callback.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenVPN:",
            reply_markup=create_openvpn_config_menu(client_name),
        )
        await state.set_state(VPNSetup.choosing_config_type)
    else:
        await callback.message.delete()
        await bot.send_message(
            callback.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard:",
            reply_markup=create_wireguard_config_menu(client_name),
        )
        await state.set_state(VPNSetup.choosing_config_type)
        await callback.answer()

@dp.callback_query(lambda c: c.data == "openvpn_menu")
async def openvpn_menu(callback: types.CallbackQuery):
    await switch_menu(callback, "–ú–µ–Ω—é OpenVPN:", reply_markup=create_openvpn_menu())
    await callback.answer()


@dp.callback_query(VPNSetup.choosing_config_type)
async def handle_interface_selection(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    client_name = user_data["client_name"]
    vpn_type = user_data["vpn_type"]
    user_id = callback.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª (–≤ create_openvpn_config_menu –ø—Ä–æ–ø–∏—Å–∞–Ω callback "cancel_openvpn_<client_name>")
    if callback.data == f"cancel_openvpn_config_{client_name}" or callback.data == f"cancel_openvpn_{client_name}":
        # –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω
        await delete_last_menus(user_id)
        try:
            await callback.message.delete()
        except Exception:
            pass

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
        if user_id == ADMIN_ID:
            await show_menu(
                user_id,
                f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–º <b>{client_name}</b>:",
                create_user_menu(client_name, back_callback="users_menu", is_admin=True)
            )
        else:
            await show_menu(
                user_id,
                f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{client_name}</b>:",
                create_user_menu(client_name, is_admin=False)
            )
        await state.clear()
        await callback.answer()
        return


@dp.callback_query(VPNSetup.choosing_protocol)
async def handle_protocol_selection(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    client_name = user_data["client_name"]

    if callback.data.startswith("send_ovpn_"):
        _, _, interface, proto, _ = callback.data.split("_", 4)
        name_core = client_name.replace("antizapret-", "").replace("vpn-", "")

        if proto == "default":
            dir_path = f"/root/antizapret/client/openvpn/{interface}/"
        else:
            dir_path = f"/root/antizapret/client/openvpn/{interface}-{proto}/"

        matched_file = None
        if os.path.exists(dir_path):
            for file in os.listdir(dir_path):
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é name_core, –Ω–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É!
                if name_core in file and file.endswith(".ovpn"):
                    matched_file = os.path.join(dir_path, file)
                    break

        if matched_file and await send_single_config(
            callback.from_user.id, matched_file, os.path.basename(matched_file)
        ):
            await callback.message.delete()
            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu()
            )
            await state.clear()
        else:
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    elif callback.data.startswith("back_to_interface_"):
        await handle_back_to_interface(callback, state)


async def handle_wg_type_selection(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    client_name = user_data["client_name"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if callback.data.startswith("back_to_interface_"):
        await handle_back_to_interface(callback, state)
        await callback.answer()
        return

    if callback.data.startswith("send_wg_"):
        _, _, interface, wg_type, _ = callback.data.split("_", 4)

        name_core = client_name.replace("antizapret-", "").replace("vpn-", "")
        dir_path = f"/root/antizapret/client/{'wireguard' if wg_type == 'wg' else 'amneziawg'}/{interface}/"

        matched_file = None
        if os.path.exists(dir_path):
            for file in os.listdir(dir_path):
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é name_core –∏ —Ç–∏–ø—É wg/am, –Ω–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É!
                if name_core in file and wg_type in file and file.endswith(".conf"):
                    matched_file = os.path.join(dir_path, file)
                    break

        if not matched_file:
            await callback.answer("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return

        await state.update_data(
            {
                "file_path": matched_file,
                "original_name": os.path.basename(matched_file),
                "short_name": f"{name_core}-{wg_type}.conf",
            }
        )

        await callback.message.edit_text(
            "Android –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏.\n–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_rename"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no_rename"),
                    ]
                ]
            ),
        )
        await state.set_state(VPNSetup.confirming_rename)


@dp.callback_query(VPNSetup.confirming_rename)
async def handle_rename_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    file_path = user_data["file_path"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
    file_size = os.path.getsize(file_path)
    if file_size == 0:
        print(f"–§–∞–π–ª –ø—É—Å—Ç: {file_path}")
        await callback.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç", show_alert=True)
        await state.clear()
        return

    if file_size > 50 * 1024 * 1024:  # 50MB
        print(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_path} ({file_size} –±–∞–π—Ç)")
        await callback.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram", show_alert=True
        )
        await state.clear()
        return

    try:
        if callback.data == "confirm_rename":
            file = FSInputFile(file_path, filename=user_data["short_name"])
            caption = f"üîê {user_data['short_name']}"
        else:
            file = FSInputFile(file_path)
            caption = f"üîê {user_data['original_name']}"

        await bot.send_document(
            chat_id=callback.from_user.id, document=file, caption=caption
        )

        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞", show_alert=True)

    await state.clear()


async def handle_back_to_interface(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    client_name = user_data["client_name"]
    vpn_type = user_data["vpn_type"]

    if vpn_type == "openvpn":
        try:
            await callback.message.delete()
        except Exception:
            pass
        await bot.send_message(
            callback.from_user.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenVPN:",
            reply_markup=create_openvpn_config_menu(client_name),
        )
        await state.set_state(VPNSetup.choosing_config_type)
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard:",
            reply_markup=create_wireguard_config_menu(client_name),
        )
        await state.set_state(VPNSetup.choosing_config_type)
    await callback.answer()



@dp.callback_query(lambda c: c.data.startswith("cancel_config_"))
async def handle_config_cancel(callback: types.CallbackQuery, state: FSMContext):
    client_name = callback.data.split("_")[-1]
    user_data = await state.get_data()
    vpn_type = user_data["vpn_type"]

    clients = await get_clients(vpn_type)
    total_pages = (len(clients) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=create_client_list_keyboard(
            clients, 1, total_pages, vpn_type, "list"
        ),
    )
    await state.clear()
    await callback.answer()

@dp.message(Command("announce"))
async def announce_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ /announce!")
        return

    text = parts[1]
    sent, failed = await announce_all(text)
    await bot.send_message(message.chat.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")



async def cleanup_openvpn_files(client_name: str):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ OpenVPN –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    clean_name = client_name.replace("antizapret-", "").replace("vpn-", "")

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    dirs_to_check = [
        "/root/antizapret/client/openvpn/antizapret/",
        "/root/antizapret/client/openvpn/antizapret-tcp/",
        "/root/antizapret/client/openvpn/antizapret-udp/",
        "/root/antizapret/client/openvpn/vpn/",
        "/root/antizapret/client/openvpn/vpn-tcp/",
        "/root/antizapret/client/openvpn/vpn-udp/",
    ]

    deleted_files = []

    for dir_path in dirs_to_check:
        if not os.path.exists(dir_path):
            continue

        for filename in os.listdir(dir_path):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            if clean_name in filename:
                try:
                    file_path = os.path.join(dir_path, filename)
                    os.remove(file_path)
                    deleted_files.append(file_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")

    return deleted_files

@dp.callback_query(lambda c: c.data.startswith("select_openvpn_"))
async def select_openvpn_config(callback: types.CallbackQuery):
    client_name = callback.data.replace("select_openvpn_", "")
    
    text = (
        "üîê <b>OpenVPN ‚Äî –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "‚Ä¢ Android ü§ñ\n"
        "‚Ä¢ iOS üçé\n"
        "‚Ä¢ Windows üíª\n"
        "‚Ä¢ macOS üçè\n"
        "‚Ä¢ Linux üêß\n\n"
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
        "üëâ <a href=\"https://kosia-zlo.github.io/mysite/faq.html"
    )
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–±—ã—á–Ω—ã–π VPN", callback_data=f"download_openvpn_vpn_{client_name}")],
        [InlineKeyboardButton(text="‚úÖ Antizapret (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", callback_data=f"download_openvpn_antizapret_{client_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_user_menu_{client_name}")]
    ])
    
    await delete_last_menus(callback.from_user.id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    await bot.send_message(
        callback.from_user.id,
        text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=markup
    )
    await callback.answer()




def get_openvpn_filename(client_name, config_type):
    if config_type == "vpn":
        return f"{FILEVPN_NAME} - –û–±—ã—á–Ω—ã–π VPN - {client_name}.ovpn"
    elif config_type == "antizapret":
        return f"{FILEVPN_NAME} - {client_name}.ovpn"


# –í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è OpenVPN
@dp.callback_query(lambda c: c.data.startswith("download_openvpn_"))
async def download_openvpn_config(callback: types.CallbackQuery):
    parts = callback.data.split("_", 3)
    _, _, config_type, client_name = parts
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ inline-—Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_last_menus(user_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    if config_type == "vpn":
        file_name = f"{FILEVPN_NAME} - –û–±—ã—á–Ω—ã–π VPN - {client_name}.ovpn"
        base_path = "/root/antizapret/client/openvpn/vpn/"
    else:
        file_name = f"{FILEVPN_NAME} - {client_name}.ovpn"
        base_path = "/root/antizapret/client/openvpn/antizapret/"

    file_path = os.path.join(base_path, file_name)

    if os.path.exists(file_path):
        await bot.send_document(
            user_id,
            FSInputFile(file_path),
            caption=f"üîê {os.path.basename(file_path)}"
        )
        await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await notify_admin_download(user_id, username, os.path.basename(file_path), "ovpn")

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_openvpn_config_{client_name}")]
        ])
        await show_menu(user_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∫–æ–Ω—Ñ–∏–≥–∞:", markup)
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_openvpn_config_{client_name}")]
        ])
        files_list = os.listdir(base_path) if os.path.exists(base_path) else []
        await show_menu(
            user_id,
            f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {file_name} –≤ –ø–∞–ø–∫–µ {base_path}\n"
            f"–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: {files_list}",
            markup
        )
        await callback.answer("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)





@dp.message(VPNSetup.entering_client_name)
async def handle_client_name(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    msg_id = data.get("add_user_msg_id")
    if msg_id:
        try:
            await bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass

    # --- –í–æ—Ç –∑–¥–µ—Å—å if, —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º ---
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await delete_last_menus(message.from_user.id)  # ‚Üê —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ clear!
        stats = get_server_info()
        await show_menu(message.from_user.id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
        return

    client_name = message.text.strip()
    if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", client_name):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -", reply_markup=cancel_markup)
        return

    data = await state.get_data()

    # --- 1. –≠—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∑–∞—è–≤–∫–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    if "approve_user_id" in data:
        user_id = data["approve_user_id"]
        result = await execute_script("1", client_name, "30")
        if result["returncode"] == 0:
            save_profile_name(user_id, client_name)
            remove_pending(user_id)
            await safe_send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: <b>{client_name}</b>\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ VPN.",
                parse_mode="HTML",
                reply_markup=create_user_menu(client_name)
            )
            await show_menu(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω!", create_main_menu())
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
        await state.clear()
        return

    # --- 2. –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω—é
    option = data.get("action")
    if option == "1":
        result = await execute_script("1", client_name, "30")
        if result["returncode"] == 0:
            msg = await message.answer("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!", reply_markup=ReplyKeyboardRemove())
            await asyncio.sleep(1)
            try:
                await msg.delete()
            except Exception:
                pass
            stats = get_server_info()
            await show_menu(message.from_user.id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    elif option == "2":
        result = await execute_script(option, client_name)
        if result["returncode"] == 0:
            stats = get_server_info()
            await show_menu(message.from_user.id, stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", create_main_menu())
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
        await state.clear()
        return
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        await state.clear()
        return




@dp.message(VPNSetup.deleting_client)
async def handle_delete_client(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–æ—Ç–µ."""
    client_name = message.text.strip()
    data = await state.get_data()
    vpn_type = "openvpn" if data["action"] == "2" else "wireguard"

    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_name}?",
        reply_markup=create_confirmation_keyboard(client_name, vpn_type),
    )   
    await state.clear()


async def get_clients(vpn_type: str):
    option = "3" if vpn_type == "openvpn" else "6"
    result = await execute_script(option)

    if result["returncode"] == 0:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        clients = [
            c.strip()
            for c in result["stdout"].split("\n")
            if c.strip()  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            and not c.startswith("OpenVPN client names:")  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ OpenVPN
            and not c.startswith(
                "WireGuard/AmneziaWG client names:"
            )  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ WireGuard
            and not c.startswith(
                "OpenVPN - List clients"
            )  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "OpenVPN - List clients"
            and not c.startswith(
                "WireGuard/AmneziaWG - List clients"
            )  # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "WireGuard/AmneziaWG - List clients"
        ]
        return clients
    return []


async def send_config(chat_id: int, client_name: str, option: str) -> bool:
    try:
        files_found = []
        # –î–ª—è WireGuard/AmneziaWG
        if option == "4":
            base_dir = "/root/antizapret/client/amneziawg/"
            ext = ".conf"
            prefix = f"amneziawg-{client_name}-"
            for root, _, files in os.walk(base_dir):
                for file in files:
                    if file.startswith(prefix) and file.endswith(ext):
                        files_found.append(os.path.join(root, file))
        # –î–ª—è OpenVPN ‚Äî –∏—â–µ–º –ø–æ –æ–±–æ–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        else:
            base_dir = "/root/antizapret/client/openvpn/"
            ext = ".ovpn"
            prefix_vpn = f"vpn-{client_name}-"
            prefix_antizapret = f"antizapret-{client_name}-"
            for root, _, files in os.walk(base_dir):
                for file in files:
                    if (
                        (file.startswith(prefix_vpn) or file.startswith(prefix_antizapret))
                        and file.endswith(ext)
                    ):
                        files_found.append(os.path.join(root, file))

        for file_path in files_found:
            await bot.send_document(
                chat_id, FSInputFile(file_path), caption=f"üîê {os.path.basename(file_path)}"
            )
        return bool(files_found)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
        return False


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_backup –∑–¥–µ—Å—å
async def send_backup(chat_id: int) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""

    paths_to_check = [
        f"/root/antizapret/backup-{SERVER_IP}.tar.gz",
        "/root/antizapret/backup.tar.gz",
    ]

    for backup_path in paths_to_check:
        try:
            if os.path.exists(backup_path):
                await bot.send_document(
                    chat_id=chat_id,
                    document=FSInputFile(backup_path),
                    caption="üì¶ –ë—ç–∫–∞–ø –∫–ª–∏–µ–Ω—Ç–æ–≤",
                )
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞ ({backup_path}): {e}")
            return False

    return False  # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

#@dp.callback_query()
async def handle_callback_query(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ Telegram –±–æ—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."""
    data = callback.data
    user_id = callback.from_user.id

    try:
        if user_id != ADMIN_ID and user_id not in AUTHORIZED_USERS:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if data.startswith("page_"):
            _, action, vpn_type, page = data.split("_", 3)
            page = int(page)
            clients = await get_clients(vpn_type)
            total_pages = (len(clients) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
                reply_markup=create_client_list_keyboard(
                    clients, page, total_pages, vpn_type, action
                ),
            )
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å)
        if data.startswith("delete_"):
            _, vpn_type, client_name = data.split("_", 2)
            await callback.message.edit_text(
                f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_name} ({vpn_type})?",
                reply_markup=create_confirmation_keyboard(client_name, vpn_type),
            )
            await callback.answer()
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if data.startswith("page_delete_"):
            _, _, vpn_type, page = data.split("_")
            page = int(page)
            clients = await get_clients(vpn_type)
            total_pages = (len(clients) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=create_client_list_keyboard(
                    clients, page, total_pages, vpn_type, "delete"
                ),
            )
            await callback.answer()
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ü–∏—Ñ—Ä–æ–≤—ã–µ callback: 2 –∏ 5)
        if data in ["2", "5"]:
            vpn_type = "openvpn" if data == "2" else "wireguard"
            clients = await get_clients(vpn_type)
            if not clients:
                await callback.message.edit_text("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                await callback.answer()
                return
            total_pages = (len(clients) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=create_client_list_keyboard(
                    clients, 1, total_pages, vpn_type, "delete"
                ),
            )
            await state.set_state(VPNSetup.list_for_delete)
            await callback.answer()
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (confirm_openvpn_–∏–º—è –∏–ª–∏ confirm_wireguard_–∏–º—è)
        if data.startswith("confirm_"):
            _, vpn_type, client_name = data.split("_", 2)
            option = "2" if vpn_type == "openvpn" else "5"
            try:
                result = await execute_script(option, client_name)
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è OpenVPN
                if vpn_type == "openvpn" and result["returncode"] == 0:
                    deleted_files = await cleanup_openvpn_files(client_name)
                    if deleted_files:
                        result["additional_deleted"] = deleted_files

                if result["returncode"] == 0:
                    msg = f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_name} —É–¥–∞–ª–µ–Ω!"
                    if vpn_type == "openvpn" and result.get("additional_deleted"):
                        msg += f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result['additional_deleted'])}"
                    await callback.message.edit_text(msg)
                    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
                else:
                    await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            finally:
                await callback.answer()
                await state.clear()
            return

        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if data == "cancel_delete":
            await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_menu())
            await callback.answer()
            return

        # –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ü–∏—Ñ—Ä–æ–≤—ã–µ callback: 3 –∏ 6)
        if data in ["3", "6"]:
            vpn_type = "openvpn" if data == "3" else "wireguard"
            clients = await get_clients(vpn_type)
            total_pages = (len(clients) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
                reply_markup=create_client_list_keyboard(
                    clients, 1, total_pages, vpn_type, "list"
                ),
            )
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ü–∏—Ñ—Ä–æ–≤—ã–µ callback: 1 –∏ 4)
        if data in ["1", "4"]:
            await state.update_data(action=1)
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:")
            await state.set_state(VPNSetup.entering_client_name)
            await callback.answer()
            return

        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if data == "7":
            await callback.message.edit_text("‚è≥ –ò–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
            result = await execute_script("7")
            if result["returncode"] == 0:
                await callback.message.edit_text("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
                await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
            else:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
        if data == "8":
            await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...")
            result = await execute_script("8")
            if result["returncode"] == 0:
                if await send_backup(callback.from_user.id):
                    await callback.message.delete()
                    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
                else:
                    await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø")
            else:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {result['stderr']}"
                )
            await callback.answer()
            return

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


async def notify_admin_download(user_id, username, file_name, vpn_type):
    vpn_emoji = "üì•"
    vpn_text = {
        "wg": "WireGuard",
        "amnezia": "Amnezia",
        "ovpn": "OpenVPN"
    }
    text = (
        f"{vpn_emoji} –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code> (@{username})\n"
        f"–§–∞–π–ª: {file_name}"
    )
    try:
        await bot.send_message(ADMIN_ID, text, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


@dp.callback_query(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def process_application(callback: types.CallbackQuery, state: FSMContext):
    action, user_id = callback.data.split("_", 1)
    user_id = int(user_id)
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    if action == "approve":
        user_obj = await bot.get_chat(user_id)
        client_name = user_obj.username or f"user{user_id}"
        client_name = str(client_name)[:32]

        result = await execute_script("1", client_name, "30")
        if result["returncode"] == 0:
            save_profile_name(user_id, client_name)
            approve_user(user_id)
            remove_pending(user_id)
            save_user_id(user_id)

            # 1) —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π —É –∞–¥–º–∏–Ω–∞
            try:
                await callback.message.delete()
            except Exception:
                pass

            # 2) —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await safe_send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                f"–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è: <b>{client_name}</b>\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ VPN.",
                parse_mode="HTML",
                reply_markup=create_user_menu(client_name)
            )

            # 3) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            stats = get_server_info()
            await show_menu(
                callback.from_user.id,
                stats + "\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
                create_main_menu()
            )
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {result['stderr']}")
        await callback.answer()
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    else:  # action == "reject"
        remove_pending(user_id)

        # —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        try:
            await callback.message.delete()
        except Exception:
            pass

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await safe_send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        # (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—É –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –º–µ–Ω—é
        # await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback.answer()




async def notify_expiring_users():
    while True:
        try:
            if not os.path.exists(APPROVED_FILE):
                await asyncio.sleep(12 * 3600)
                continue

            with open(APPROVED_FILE, "r") as f:
                approved_users = [line.strip() for line in f if line.strip().isdigit()]

            for user_id in approved_users:
                user_id_int = int(user_id)
                client_name = get_profile_name(user_id_int)
                if not client_name:
                    continue

                cert_info = get_cert_expiry_info(client_name)
                if not cert_info:
                    continue

                days_left = cert_info["days_left"]
                # —Ñ–ª–∞–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                flag_file = f".notified_{user_id}_{days_left}.flag"

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5,4,3,2,1 –¥–µ–Ω—å
                if 1 <= days_left <= 5:
                    if not os.path.exists(flag_file):
                        # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            await bot.send_message(
                                user_id_int,
                                f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω. –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è VPN-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.",
                                parse_mode="HTML"
                            )
                        except:
                            pass
                        # 2) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                        try:
                            await bot.send_message(
                                ADMIN_ID,
                                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id_int}</code> ({client_name}) –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.",
                                parse_mode="HTML"
                            )
                        except:
                            pass
                        # 3) —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                        with open(flag_file, "w") as f_flag:
                            f_flag.write("notified")

                # –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
                elif days_left < 0:
                    await revoke_and_cleanup(client_name, user_id_int)

                # –ï—Å–ª–∏ –±–æ–ª–µ–µ 5 –¥–Ω–µ–π ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏
                elif days_left > 5:
                    for fn in os.listdir():
                        if fn.startswith(f".notified_{user_id}_") and fn.endswith(".flag"):
                            try:
                                os.remove(fn)
                            except:
                                pass

        except Exception as e:
            print(f"[notify_expiring_users] –û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(12 * 3600)


async def revoke_and_cleanup(client_name: str, user_id_int: int):
    """
    –û—Ç–∑—ã–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç client_name, –æ–±–Ω–æ–≤–ª—è–µ—Ç CRL,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç OpenVPN, —É–¥–∞–ª—è–µ—Ç WireGuard-peer,
    —á–∏—Å—Ç–∏—Ç –∫–æ–Ω—Ñ–∏–≥–∏, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ pending
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    # 1) revoke + gen-crl —á–µ—Ä–µ–∑ Easy-RSA
    easyrsa = "/etc/openvpn/easyrsa3/easyrsa"
    subprocess.run([easyrsa, "--batch", "revoke", client_name], check=True)
    subprocess.run([easyrsa, "gen-crl"],                    check=True)

    # 2) —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π CRL –≤ –º–µ—Å—Ç–æ, –≥–¥–µ –µ–≥–æ –∂–¥—ë—Ç OpenVPN
    src_crl = "/etc/openvpn/easyrsa3/pki/crl.pem"
    dst_crl = "/etc/openvpn/server/keys/crl.pem"
    shutil.copy(src_crl, dst_crl)
    os.chmod(dst_crl, 0o644)

    # 3) –º—è–≥–∫–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å CRL ‚Äì SIGUSR1 –≤—Å–µ–º openvpn-–ø—Ä–æ—Ü–µ—Å—Å–∞–º
    subprocess.run(["pkill", "-USR1", "openvpn"], check=True)

    # 4) —É–¥–∞–ª–∏—Ç—å WireGuard-peer
    pubkey = get_pubkey_for_client(client_name)
    if pubkey:
        subprocess.run(["wg", "set", "wg0", "peer", pubkey, "remove"], check=True)

    # 5) –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (OpenVPN, WireGuard, VLESS)
    cleanup_configs_for_client(client_name)

    # 6) —Å–Ω—è—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ pending
    remove_approved_user(user_id_int)
    add_pending(user_id_int, "", "")

    # 7) —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–µ–Ω—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_last_menus(user_id_int)

    # 8) —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="send_request")]
    ])
    try:
        await bot.send_message(
            user_id_int,
            "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å—Ç—ë–∫.\n\n"
            "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É:",
            parse_mode="HTML",
            reply_markup=markup
        )
    except:
        pass

    # 9) —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            ADMIN_ID,
            f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id_int}</code> ({client_name}) —Å–Ω—è—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.",
            parse_mode="HTML"
        )
    except:
        pass


def get_pubkey_for_client(client_name: str) -> str | None:
    """
    –ò—â–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞ client_name
    –≤ –∫–æ–Ω—Ñ–∏–≥–µ WireGuard/AmneziaWG –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    """
    for base in ["/root/antizapret/client/wireguard",
                 "/root/antizapret/client/amneziawg"]:
        for root, _, files in os.walk(base):
            for fname in files:
                if client_name in fname and fname.endswith(".conf"):
                    path = os.path.join(root, fname)
                    try:
                        with open(path, encoding="utf-8") as cf:
                            for line in cf:
                                if line.strip().startswith("PublicKey"):
                                    return line.split("=", 1)[1].strip()
                    except:
                        continue
    return None


def cleanup_configs_for_client(client_name: str):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ OpenVPN, WireGuard –∏ VLESS,
    —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å client_name.
    """
    patterns = [
        "/root/antizapret/client/openvpn/**/*{cn}*.ovpn",
        "/root/antizapret/client/wireguard/**/*{cn}*.conf",
        "/root/antizapret/client/amneziawg/**/*{cn}*.conf",
        "/root/vless-configs/{cn}.txt",
    ]
    for pat in patterns:
        for path in glob.glob(pat.format(cn=client_name), recursive=True):
            try:
                os.remove(path)
            except:
                pass


# ==== –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ====
async def main():
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(notify_expiring_users())
    await set_bot_commands()
    await dp.start_polling(bot)




if __name__ == "__main__":
    asyncio.run(main())
